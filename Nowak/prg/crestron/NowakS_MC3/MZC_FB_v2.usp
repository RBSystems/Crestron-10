#CATEGORY "41" // Remote System Interface
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// =======================================================

#DEFINE_CONSTANT MIN_MSG_LENGTH 3
#DEFINE_CONSTANT BUFFER_SIZE 512
#DEFINE_CONSTANT ZONES_COUNT 8
#DEFINE_CONSTANT SYNC_BYTE "\x55"

// =======================================================

BUFFER_INPUT msgIn[BUFFER_SIZE];

// =======================================================

DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT iPodStop_FB;
DIGITAL_OUTPUT iPodPlay_FB;
DIGITAL_OUTPUT iPodPause_FB;
DIGITAL_OUTPUT iPodRepeatOff_FB;
DIGITAL_OUTPUT iPodRepeatOne_FB;
DIGITAL_OUTPUT iPodRepeatAll_FB;
DIGITAL_OUTPUT iPodShuffleOff_FB;
DIGITAL_OUTPUT iPodShuffleSongs_FB;
DIGITAL_OUTPUT iPodShuffleAlbums_FB;
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT zoneOn[ZONES_COUNT];
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT zoneMuted[ZONES_COUNT, ZONES_COUNT];
DIGITAL_OUTPUT _SKIP_;
STRING_OUTPUT tuner1Info;
STRING_OUTPUT tuner2Info;
STRING_OUTPUT iPodInfo;
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT iPodStateStamp;
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT zoneSource[ZONES_COUNT];
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT zoneVolumePercent[ZONES_COUNT];

// =======================================================

FUNCTION ProcessZoneStatusMsg(STRING singleMsg, INTEGER bytes[])
{
	INTEGER currentZoneID;

	currentZoneID = bytes[4] + 1;
	
	zoneOn[currentZoneID] = Bit(singleMsg, 6, 1);		// czemu generuje: Access outside source string in Bit() ?
	zoneMuted[currentZoneID] = Bit(singleMsg, 6, 0);	// czemu generuje: Access outside source string in Bit() ?
    
	if (bytes[7] = 255) zoneSource[currentZoneID] = 0;
	else zoneSource[currentZoneID] = bytes[7] + 1;
	
	zoneVolumePercent[currentZoneID] = bytes[8];
}

FUNCTION ProcessSourceInfoMsg(STRING singleMsg, INTEGER bytes[])
{
	STRING infoMsg[BUFFER_SIZE];

	infoMsg = mid(singleMsg, 5, len(singleMsg)-6); 

	switch (bytes[4])
	{
		case (0): tuner1Info = infoMsg;		case (1): tuner2Info = infoMsg;
                                                                                                                                                                   


		case (2): iPodInfo = infoMsg;

		default: trace("SourceInfo: nieobslugiwane zrodlo!");		
	}
}

FUNCTION ProcessMediaInfoMsg(INTEGER bytes[])
{
	if (bytes[4] != 49)
	{
		trace("MediaInfo: nieobslugiwane zrodlo!");
		return;
	}

	iPodStateStamp = bytes[5];

	switch (bytes[8])
	{
		case (0):
		{
			iPodStop_FB = 1;
			iPodPlay_FB = 0;
			iPodPause_FB = 0;
		}
		case (1):
		{
			iPodStop_FB = 0;
			iPodPlay_FB = 1;
			iPodPause_FB = 0;
		}
		case (2):
		{
			iPodStop_FB = 0;
			iPodPlay_FB = 0;
			iPodPause_FB = 1;
		}
	}

	switch (bytes[9])
	{
		case (0):
		{
			iPodRepeatOff_FB = 1;
			iPodRepeatOne_FB = 0;
			iPodRepeatAll_FB = 0;
		}
		case (1):
		{
			iPodRepeatOff_FB = 0;
			iPodRepeatOne_FB = 1;
			iPodRepeatAll_FB = 0;
		}
		case (2):
		{
			iPodRepeatOff_FB = 0;
			iPodRepeatOne_FB = 0;
			iPodRepeatAll_FB = 1;
		}
	}

	switch (bytes[10])
	{
		case (0):
		{
			iPodShuffleOff_FB = 1;
			iPodShuffleSongs_FB = 0;
			iPodShuffleAlbums_FB = 0;
		}
		case (1):
		{
			iPodShuffleOff_FB = 0;
			iPodShuffleSongs_FB = 1;
			iPodShuffleAlbums_FB = 0;
		}
		case (2):
		{
			iPodShuffleOff_FB = 0;
			iPodShuffleSongs_FB = 0;
			iPodShuffleAlbums_FB = 1;
		}
	}		
}

FUNCTION DelegateMessageToProcess(STRING msg)
{
    INTEGER i;

	INTEGER msgBytes[BUFFER_SIZE];

	for (i=1 to len(msg))
	{
		msgBytes[i] = Byte(msg, i);
	}

	switch (msgBytes[3])
	{
    	case (32): ProcessZoneStatusMsg(msg, msgBytes); // 0x20 - Zone Status Message (=12)
        
		case (39): ProcessSourceInfoMsg(msg, msgBytes); // 0x27 - Source Information Message (>5)

		case (147): ProcessMediaInfoMsg(msgBytes); // 0x93 - Media Information Messages (>29)

		default:
		{
			trace("Nieoblugiwany typ wiadomosci!");
		}
	}
}

// =======================================================

// Przetwarzanie FB przychodzacych z urzadzenia
THREADSAFE CHANGE msgIn
{
	STRING singleMsg[BUFFER_SIZE];
	INTEGER syncPos;
	INTEGER msgLength;
        
	while(1)
    {
		try
		{
            syncPos = 0;

			// Pozycja bajtu synchronizacji
			syncPos = find(SYNC_BYTE, msgIn);

            // Wyjatek - bufor nie zawiera bajtu synchronizacji "\x55"
			if (syncPos=0)
			{
				ProcessLogic();
				continue;
			}

			// Wyjatek - bufor nie zaczyna sie od bajtu synchronizacji "\x55"
			if (!(syncPos = 1))
			{
				// msgIn = mid(msgIn, syncPos, len(msgIn));
				msgIn = right(msgIn, len(msgIn) - syncPos +1);

			}
			
			// Wyjatek - pakiet za krotki, zeby w ogole probowac go rozpatrywac
			if (len(msgIn) < MIN_MSG_LENGTH)
			{
				ProcessLogic();
				continue;
			}

            msgLength = byte(msgIn, 2) + 1;

			// Wyjatek - w buforze nie ma jeszcze wszystkich bajtów wiadomosci
			if (len(msgIn) < msgLength)
			{
				ProcessLogic();
				continue;
			}

            singleMsg = RemoveByLength(msgLength, msgIn);

			DelegateMessageToProcess(singleMsg);
		}
		catch
		{
			Trace("RX processing exception: %s", GetExceptionMessage());
		}    
	}
}
