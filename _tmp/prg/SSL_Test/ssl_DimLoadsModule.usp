//Compiler Directives
#CATEGORY "41" // Remote System Interface
#SYMBOL_NAME "SSL DimLoadsModule"
#HINT ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// Constants
#DEFINE_CONSTANT STRING_SIZE 30
#DEFINE_CONSTANT MAX_NUMBER_OF_LOADS 10

// Include Libraries
#USER_SIMPLSHARP_LIBRARY "ssl_Utility"
#USER_SIMPLSHARP_LIBRARY "ssl_Residence"

// Inputs
DIGITAL_INPUT _SKIP_, _SKIP_;
ANALOG_INPUT load_Level_FB[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {0}

// Outputs
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT load_Raise[MAX_NUMBER_OF_LOADS]; // {0}
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT load_Lower[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {1}
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT load_Level[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {0}

// Parameters
INTEGER_PARAMETER pModuleId;
INTEGER_PARAMETER pLoadType;
INTEGER_PARAMETER pLoadId[MAX_NUMBER_OF_LOADS];
INTEGER_PARAMETER _SKIP_;
STRING_PARAMETER pLoadName[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS][STRING_SIZE];

// Parameter Properietes


#BEGIN_PARAMETER_PROPERTIES pModuleId, pLoadId
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 999d;
   propShortDescription = "Unique light Id";
#END_PARAMETER_PROPERTIES


#BEGIN_PARAMETER_PROPERTIES pLoadType
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propList = { 1d,"Lights" };
   propShortDescription = "Type of load";
#END_PARAMETER_PROPERTIES



// Structure Definitions

// Global Variable
PlusModule masterModule;
DimLoadsModule dimLoadsModule;

// Delegates

CALLBACK FUNCTION SendDigitalOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): load_Raise[_signalIndex] = _signalValue;
		case (1): load_Lower[_signalIndex] = _signalValue;
	}
}

CALLBACK FUNCTION SendAnalogOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): load_Level[_signalIndex] = _signalValue;
	}
}


// Functions

FUNCTION RegisterDelegates()
{
	RegisterDelegate(masterModule, SendDigitalOutputDelegate, SendDigitalOutputCallback);
	RegisterDelegate(masterModule, SendAnalogOutputDelegate, SendAnalogOutputCallback);

}

FUNCTION AddLights()
{
	INTEGER i;

	for (i = 1 to MAX_NUMBER_OF_LOADS)
		if (IsSignalDefined(load_Level[i]))
			dimLoadsModule.AddLight(i, pLoadId[i], pLoadName[i]);
			
}

FUNCTION AddLoads()
{
	switch (pLoadType)
	{
		case (1): AddLights();
	}
}

FUNCTION Initialize()
{
	RegisterDelegates();
    masterModule.Register(pModuleId);
	dimLoadsModule.SetPlusModule(pModuleId);
	dimLoadsModule.SetNumberOfLoads(MAX_NUMBER_OF_LOADS);
	AddLoads();
}

// Event Handlers

CHANGE load_Level_FB
{
	INTEGER i;

	i = GetLastModifiedArrayIndex();
	masterModule.UpdateAnalogInput(0, i, load_Level_FB[i]);
}

// Main Function

Function Main()
{
	Initialize();
	WaitForInitializationComplete();
	// TODO Init
}
