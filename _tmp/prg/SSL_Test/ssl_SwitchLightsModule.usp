//Compiler Directives
#CATEGORY "41" // Remote System Interface
#SYMBOL_NAME "SSL switchLoadsModule"
#HINT ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// Constants
#DEFINE_CONSTANT STRING_SIZE 30
#DEFINE_CONSTANT MAX_NUMBER_OF_LOADS 10

// Include Libraries
#USER_SIMPLSHARP_LIBRARY "ssl_Utility"
#USER_SIMPLSHARP_LIBRARY "ssl_Residence"

// Inputs
DIGITAL_INPUT _SKIP_, _SKIP_;
DIGITAL_INPUT load_On_FB[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {0}

// Outputs
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT load_On[MAX_NUMBER_OF_LOADS]; // {0}
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT load_Off[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {1}

// Parameters
INTEGER_PARAMETER pModuleId;
INTEGER_PARAMETER pLoadType;
INTEGER_PARAMETER pLoadId[MAX_NUMBER_OF_LOADS];
INTEGER_PARAMETER _SKIP_;
STRING_PARAMETER pLoadName[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS][STRING_SIZE];

// Parameter Properietes


#BEGIN_PARAMETER_PROPERTIES pModuleId, pLoadId
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 999d;
   propShortDescription = "Unique light Id";
#END_PARAMETER_PROPERTIES


#BEGIN_PARAMETER_PROPERTIES pLoadType
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propList = { 1d,"Lights" },{ 2d,"Outlets" };
   propShortDescription = "Type of load";
#END_PARAMETER_PROPERTIES



// Structure Definitions

// Global Variable
PlusModule masterModule;
SwitchLoadsModule switchLoadsModule;

// Delegates

CALLBACK FUNCTION SendDigitalOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): load_On[_signalIndex] = _signalValue;
		case (1): load_Off[_signalIndex] = _signalValue;
	}
}

// Functions

FUNCTION RegisterDelegates()
{
	RegisterDelegate(masterModule, SendDigitalOutputDelegate, SendDigitalOutputCallback);
}



FUNCTION AddLights()
{
	INTEGER i;

	for (i = 1 to MAX_NUMBER_OF_LOADS)
		if (IsSignalDefined(load_On[i]))
			switchLoadsModule.AddLight(i, pLoadId[i], pLoadName[i]);

	Residence.SwitchLightsInitialized();
}

FUNCTION AddOutlets()
{
	INTEGER i;

	for (i = 1 to MAX_NUMBER_OF_LOADS)
		if (IsSignalDefined(load_On[i]))
			switchLoadsModule.AddSwitchOutlet(i, pLoadId[i], pLoadName[i]);

	Residence.SwitchOutletsInitialized();
}

FUNCTION AddLoads()
{
	switch (pLoadType)
	{
		case (1): AddLights();
		case (2): AddOutlets();
	}
}

FUNCTION Initialize()
{
	RegisterDelegates();
    masterModule.Register(pModuleId);
	switchLoadsModule.SetPlusModule(pModuleId);
	switchLoadsModule.SetNumberOfLoads(MAX_NUMBER_OF_LOADS);
	AddLoads();
}

// Event Handlers

CHANGE load_On_FB
{
	INTEGER i;

	i = GetLastModifiedArrayIndex();
	masterModule.UpdateDigitalInput(0, i, load_On_FB[i]);
}

// Main Function

Function Main()
{
	Initialize();
	WaitForInitializationComplete();
	// TODO Init
}
