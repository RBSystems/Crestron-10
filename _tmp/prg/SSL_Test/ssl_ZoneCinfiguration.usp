//Compiler Directives
#CATEGORY "41" // Remote System Interface
#SYMBOL_NAME "ssl_ZoneConfiguration"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// Constants
#DEFINE_CONSTANT DELIMITER ","
#DEFINE_CONSTANT NAME_STRING_SIZE 30
#DEFINE_CONSTANT ELEMENTS_STRING_SIZE 30

// Include Libraries
#USER_SIMPLSHARP_LIBRARY "ssl_Utility"
#USER_SIMPLSHARP_LIBRARY "ssl_Residence"

// Inputs

// DIGITAL_INPUT
// ANALOG_INPUT
// STRING_INPUT
// BUFFER_INPUT
// _SKIP_

// Outputs

// DIGITAL_OUTPUT
// ANALOG_OUTPUT
// STRING_OUTPUT

// Parameters

INTEGER_PARAMETER pZoneId;
STRING_PARAMETER pZoneName[NAME_STRING_SIZE];
STRING_PARAMETER pSwitchLightsId[ELEMENTS_STRING_SIZE];
STRING_PARAMETER pSwitchOutletsId[ELEMENTS_STRING_SIZE];
STRING_PARAMETER pDimLightsId[ELEMENTS_STRING_SIZE];
STRING_PARAMETER pDimOutletsId[ELEMENTS_STRING_SIZE];

// Parameter Properietes

#BEGIN_PARAMETER_PROPERTIES pZoneId
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 999d;
   propShortDescription = "Unique Zone Id";
#END_PARAMETER_PROPERTIES


// Structure Definitions

// Global Variables
Zone thisZone;

// Functions

FUNCTION AddSwitchLights()
{
	STRING tempString[ELEMENTS_STRING_SIZE];

	tempString = pSwitchLightsId;

	while (find(DELIMITER, tempString) > 0)
	{
		thisZone.AddSwitchLight(atoi(remove(DELIMITER, tempString)));
	}

	if (len(tempString) > 0) thisZone.AddSwitchLight(atoi(tempString));
	
}

FUNCTION AddSwitchOutlets()
{
	STRING tempString[ELEMENTS_STRING_SIZE];

	tempString = pSwitchOutletsId;

	while (find(DELIMITER, tempString) > 0)
	{
		thisZone.AddSwitchOutlet(atoi(remove(DELIMITER, tempString)));
	}

	if (len(tempString) > 0) thisZone.AddSwitchOutlet(atoi(tempString));
	
}

FUNCTION AddDimLights()
{
	STRING tempString[ELEMENTS_STRING_SIZE];

	tempString = pDimLightsId;

	while (find(DELIMITER, tempString) > 0)
	{
		thisZone.AddDimLight(atoi(remove(DELIMITER, tempString)));
	}

	if (len(tempString) > 0) thisZone.AddDimLight(atoi(tempString));
	
}

FUNCTION AddDevices()
{
	AddSwitchLights();
	AddSwitchOutlets();
	AddDimLights();
}

EVENTHANDLER DevicesInitializedHandler(Dummy dummy, EventArgs e)
{
	AddDevices();
}

FUNCTION RegisterSharpEvents()
{
	RegisterEvent(Residence, DevicesInitialized, DevicesInitializedHandler);
}

FUNCTION Initialize()
{
	RegisterSharpEvents();
	thisZone.SetId(pZoneId);
	thisZone.SetName(pZoneName);
	Residence.AddZone(thisZone);
}

// Event Handlers

// Main Function

Function Main()
{
	Initialize();
	WaitForInitializationComplete();
	// TODO Init
}
