FUNCTION test_01()
{
	STRING crcStrFull[2];
	STRING crcStrFromInt[2];
	INTEGER crcIntFull, crcIntLow, crcIntHigh;

	crcStrFull = "\x14\x7A";

	crcIntFull = 0x147A;
	crcIntHigh = high(crcIntFull);
	crcIntLow = low(crcIntFull);
	
	trace("crcStrFull - 2 byte String: %s", crcStrFull);
	delay(10);
	testOut$ = crcStrFull; // \x14\x7A

	delay(10);

	trace("crcIntFull - Integer decimal: %u", crcIntFull); // 5242
	delay(10);
	trace("crcIntFull - Integer hexadecimal: %X", crcIntFull); // 147A
	delay(10);

	delay(10);

	trace("crcIntHigh - Integer decimal: %u", crcIntHigh); // 20
	delay(10);
	trace("crcIntHigh - Integer hexadecimal: %X", crcIntHigh); // 14
	delay(10);

    delay(10);

	trace("crcIntLow - Integer decimal: %u", crcIntLow); // 122
	delay(10);
	trace("crcIntLow - Integer hexadecimal: %X", crcIntLow); // 7A
	delay(10);

	crcStrFromInt = chr(crcIntHigh) + chr(crcIntLow);
    trace("crcStrFromInt - 2 byte String made from crcHigh and crcLow: %s", crcStrFromInt);
	delay(10);
	testOut$ = crcStrFromInt; // \x14\x7A

	delay(10);

	trace("Byte(crcStrFull, 1) = 0x14 decimal = %u", byte(crcStrFull, 1)); // 20
	trace("Byte(crcStrFull, 1) = 0x14 hexadecimal = %X", byte(crcStrFull, 1)); // 14

	delay(10);

    trace("Byte(crcStrFull, 2) = 0x7A decimal = %u", byte(crcStrFull, 2)); // 122
	trace("Byte(crcStrFull, 2) = 0x7A hexadecimal = %X", byte(crcStrFull, 2)); // 7A

	clearBuffer(testIn$);
}

FUNCTION test_02()
{
	STRING userCode[4];
	STRING twoDigits[2];
	STRING oneChar[1];

	userCode = "1234";

	trace("Original user code = %s", userCode);

	twoDigits = left(userCode, 2);

	trace("First two digits of user code = %s", twoDigits);

	oneChar = chr(hextoi(twoDigits));

	trace("OneChar = %s", oneChar);

	testOut$ = oneChar; // "\x12"

	twoDigits = right(userCode, 2);

	trace("Last two digits of user code = %s", twoDigits);

	oneChar = chr(hextoi(twoDigits));

	trace("OneChar = %s", oneChar);

	testOut$ = oneChar; // "\x34"	
}

FUNCTION test_02()
{
	STRING userCode[8];
	STRING prefix[2];
	
	userCode = "1234";
	prefix = "";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "1234567";
	prefix = "";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "12345678";
	prefix = "";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

    userCode = "1234";
	prefix = "97";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "1234567";
	prefix = "97";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "12345678";
	prefix = "97";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "1234";
	prefix = "5";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "1234567";
	prefix = "5";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);

	userCode = "12345678";
	prefix = "5";
	trace("Code = %s | Prefix = %s", userCode, prefix);
	testOut$ = UserCodeToBytes(userCode, prefix);
	delay(50);
}

FUNCTION test_01()
{
	INTEGER byteValue;

	byteValue = 1;
	trace("Init value = %u (DEC) = %X (HEX)", byteValue, byteValue); // 1,1
    
	byteValue = byteValue << 1;
	trace("After shift left by 1 = %u (DEC) = %X (HEX)", byteValue, byteValue); // 2,4
    
	byteValue = 1;
	byteValue = byteValue << 2;
	trace("After shift left by 2 = %u (DEC) = %X (HEX)", byteValue, byteValue); // 4,4

	byteValue = 1;
	byteValue = byteValue >> 1;
	trace("After shift right by 1 = %u (DEC) = %X (HEX)", byteValue, byteValue); // 0,0

	byteValue = 1;
	byteValue = byteValue >> 2;
	trace("After shift right by 2 = %u (DEC) = %X (HEX)", byteValue, byteValue); // 0,0
}