// +++ Dyrektywy kompilatora +++
#SYMBOL_NAME "TV SAT Presets"
#CATEGORY "40" // Interface-Specific Logic
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DIGITAL_EXPAND InputsWithParams
// --- Dyrektywy kompilatora ---

// +++ Stale +++
#DEFINE_CONSTANT PRESETY_ILOSC_MIN 3
#DEFINE_CONSTANT PRESETY_ILOSC_MAX 250
#DEFINE_CONSTANT CYFRY_ILOSC 10
#DEFINE_CONSTANT PULSE_TIME 1
#DEFINE_CONSTANT DELAY_TIME 50
// --- Stale ---

// +++ Wejscia +++
DIGITAL_INPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
DIGITAL_INPUT presety[PRESETY_ILOSC_MAX, PRESETY_ILOSC_MIN];
// --- Wejscia ---

// +++ Wyjscia +++
DIGITAL_OUTPUT cyfry[CYFRY_ILOSC];
DIGITAL_OUTPUT _SKIP_;
// --- Wyjscia --- 

// +++ Parametry +++
INTEGER_PARAMETER unused[CYFRY_ILOSC];
INTEGER_PARAMETER kanaly[PRESETY_ILOSC_MAX, PRESETY_ILOSC_MIN];
// --- Parametry ---

// +++ Wlasciwosci parametrow +++

#BEGIN_PARAMETER_PROPERTIES unused
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 0d;
   propList = { 0d , "NIEUZYWANY" };
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES kanaly
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 999d;
#END_PARAMETER_PROPERTIES
// --- Wlasciwosci parametrow ---

// +++ Zmienne globalne +++
INTEGER presetyLength;
// --- Zmienne globalne ---

// +++ Funkcje +++

Function selectPreset(INTEGER index)
{                          
	INTEGER iloscCyfr, setki, dziesiatki, jednosci;	                                                    
	
	setki = kanaly[index]/100;
	
	dziesiatki = (kanaly[index] - (setki * 100)) / 10;
	
	jednosci = kanaly[index] - (setki * 100) - (dziesiatki * 10);
	
	if (setki = 0)
	{
		if (dziesiatki = 0)
		{
			iloscCyfr = 1;
		}
		else iloscCyfr = 2;
	}
	else iloscCyfr = 3;
	
	
	if (iloscCyfr = 3)
	{
		PULSE(PULSE_TIME, cyfry[setki]);
		DELAY(DELAY_TIME);
		
		if (dziesiatki = 0) dziesiatki = 10;
		
		PULSE(PULSE_TIME, cyfry[dziesiatki]);
		DELAY(DELAY_TIME);
		
		if (jednosci = 0) jednosci = 10;
		
		PULSE(PULSE_TIME, cyfry[jednosci]);
		DELAY(DELAY_TIME);
	}
	else if (iloscCyfr = 2)
	{
		PULSE(PULSE_TIME, cyfry[dziesiatki]);
		DELAY(DELAY_TIME);
		
		if (jednosci = 0) jednosci = 10;
		
		PULSE(PULSE_TIME, cyfry[jednosci]);
		DELAY(DELAY_TIME);
	}
	else
	{
		if (jednosci = 0) jednosci = 10;
		
		PULSE(PULSE_TIME, cyfry[jednosci]);
		DELAY(DELAY_TIME);
	}
	 
}


Function presetyLengthSet()
{
	INTEGER tempLength, i, lastDefinedIndex;
	
	tempLength = GetNumArrayCols(presety);
	lastDefinedIndex = 0;
	
	for (i = 1 to tempLength)
	{
		if (IsSignalDefined(presety[i])) lastDefinedIndex = i;
	}		
	
	presetyLength = lastDefinedIndex;
}
// --- Funkcje ---

// +++ Obsluga zdarzen +++
PUSH presety
{
    selectPreset(GetLastModifiedArrayIndex());
}
// --- Obsluga zdarzen ---

// +++ Funkcja Main +++
Function Main()
{
    WaitForInitializationComplete();
        
    presetyLengthSet();    
}
// --- Funkcja Main ---