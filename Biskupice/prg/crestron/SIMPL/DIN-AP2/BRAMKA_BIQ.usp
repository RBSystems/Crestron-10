/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "41" // Remote System Interface
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN
   Jedyny parametr odpowiada za numer joina identyczny z WAGO.
   Limity i zapetnalnie trybow wentylacji i setValue liczone jest juz na samym przycisku.
   Trzy sekundowe przytrzymanie sceny powoduje wyslanie prosby o jej zapisanie.
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT trybUp,trybDwn,_SKIP_,setUp,setDwn,_SKIP_,wenUp,wenDwn,_SKIP_,scena[8,3];
// ANALOG_INPUT
STRING_INPUT  _SKIP_,_SKIP_,_SKIP_,_SKIP_,strIn[30];
// BUFFER_INPUT 

DIGITAL_OUTPUT tryb[4],_SKIP_,wen[4,4];
ANALOG_OUTPUT _SKIP_,tryb_a,wen_a;
STRING_OUTPUT _SKIP_,temp_set,temp_akt,_SKIP_,strOut;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER join;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER sc,scena_save;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/ 
Function Out (string type, string value){
	strOut=itoa(join)+"_"+type+"_"+value;
}

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/                         
push trybUp{               
	Out ("t","u");	
}
push trybDwn{
	Out ("t","d");
} 
  
                      
push setUp{
	Out ("z","u");
}
push setDwn{
	Out ("z","d");
} 


push wenUp{
	Out ("w","u");
}
push wenDwn{
	Out ("w","d");
}


push scena
{	   
	sc=GetLastModifiedArrayIndex();
	
	wait (300,waitScena){   
		Out ("s",itoa(sc-1+128));
		scena_save=1;
	}
} 
release scena
{   
	sc=GetLastModifiedArrayIndex();
	cancelWait (waitScena);
	
	if (scena_save=0){   
		Out ("s",itoa(sc-1));
	} 
	scena_save=0;
} 
      

/*
RELEASE input
{
    // TODO:  Add code here
}
*/

/*
CHANGE input
{
    // TODO:  Add code here
}
*/ 
CHANGE strIn
{
	INTEGER n,m,k,i;
	STRING str[10];
	k=atoi(strIn);
	if (k=join){ 
	
		n=find("_",strIn);
		m=find("_",strIn,n+1);
		str=mid(strIn,n+1,m-n-1);
		if (str="t"){  
		
			tryb_a=atoi(right(strIn,len(strIn)-m)); 
			for (i=1 TO 4){
				if (i=tryb_a){
					tryb[i]=1;
				}             
				else{
					tryb[i]=0;
				}
			}
			
		}
		else if (str="a"){    
		
			temp_akt=right(strIn,len(strIn)-m);
		}
		else if  (str="z"){ 
		
			temp_set=right(strIn,len(strIn)-m);
		}
		else if (str="w"){ 
		
			wen_a=atoi(right(strIn,len(strIn)-m));
			for (i=1 TO 4){     
			
				if (i=wen_a){
					wen[i]=1;
				}             
				else{
					wen[i]=0;
				}
			}		
		}
	}
	
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
/*
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}
*/
