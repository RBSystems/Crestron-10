// +++ Dyrektywy kompilatora +++
#SYMBOL_NAME "PresetsFileManager"
#CATEGORY "32" // Miscellaneous 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// --- Dyrektywy kompilatora ---

// +++ Stale +++
#DEFINE_CONSTANT DEBUG_FILE_OPERATIONS 1

#DEFINE_CONSTANT FILENAME_MAX_LENGTH 20
#DEFINE_CONSTANT FILEPATH_MAX_LENGTH 40
#DEFINE_CONSTANT VALUES_COUNT 30
#DEFINE_CONSTANT PRESETS_COUNT 5
// --- Stale ---

// +++ Wejscia +++
DIGITAL_INPUT presetUse[PRESETS_COUNT];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT presetSave[PRESETS_COUNT];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT digitalValuesIn[VALUES_COUNT, VALUES_COUNT];
ANALOG_INPUT _SKIP_;
ANALOG_INPUT analogValuesIn[VALUES_COUNT, VALUES_COUNT];
// --- Wejscia ---

// +++ Wyjscia +++ 
DIGITAL_OUTPUT _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_, _SKIP_;
DIGITAL_OUTPUT digitalValuesOut[VALUES_COUNT, VALUES_COUNT];
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT analogValuesOut[VALUES_COUNT, VALUES_COUNT];
// --- Wyjscia --- 

// +++ Parametry +++
STRING_PARAMETER FileName[FILENAME_MAX_LENGTH];
// --- Parametry ---

// +++ Wlasciwosci parametrow +++
#BEGIN_PARAMETER_PROPERTIES FileName
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "UserFile";
   propShortDescription = "nazwa pliku";
#END_PARAMETER_PROPERTIES
// --- Wlasciwosci parametrow ---

// +++ Zmienne globalne +++
INTEGER presetIndex;
INTEGER digitalValuesBuf[PRESETS_COUNT][VALUES_COUNT];
INTEGER analogValuesBuf[PRESETS_COUNT][VALUES_COUNT];
STRING filePath[FILEPATH_MAX_LENGTH];
// --- Zmienne globalne ---

// +++ Funkcje +++
Function FillBufferWithValues(INTEGER index)
{
	INTEGER i;
    
	for (i = 1 to VALUES_COUNT)
	{
		digitalValuesBuf[index][i] = digitalValuesIn[i];
		analogValuesBuf[index][i] = analogValuesIn[i];
	}
}

Function ReadValuesFromBuffer(INTEGER index)
{
	INTEGER i;

	for (i = 1 to VALUES_COUNT)
	{
		digitalValuesOut[i] = digitalValuesBuf[index][i];
		analogValuesOut[i] = analogValuesBuf[index][i];
	}
}

Function WriteBuffersToFile()
{
    SIGNED_INTEGER nFileHandle;
	SIGNED_INTEGER nNumWrite;
	INTEGER i;    

	StartFileOperations();

	nFileHandle = FileOpen(filePath, _O_TRUNC|_O_WRONLY);

    #IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("FiOps: file open: %d", nFileHandle);
	#ENDIF

	nNumWrite = WriteIntegerArray (nFileHandle, digitalValuesBuf);
	
	#IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("FiOps: file write: %d", nNumWrite);
	#ENDIF

	nNumWrite = WriteIntegerArray (nFileHandle, analogValuesBuf);
	
	#IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("FiOps: file write: %d", nNumWrite);
	#ENDIF
	
	FileClose(nFileHandle);

	EndFileOperations();
	
}

Function FillBuffersFromFile()
{
    SIGNED_INTEGER nFileHandle;
	SIGNED_INTEGER nNumRead;
    INTEGER i;

	StartFileOperations();

	nFileHandle = FileOpen(filePath,_O_RDONLY);

	#IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("FiOps: file open: %d", nFileHandle);
	#ENDIF

	nNumRead = ReadIntegerArray (nFileHandle, digitalValuesBuf);
	
	#IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("FiOps: file read: %d", nNumRead);
	#ENDIF

	nNumRead = ReadIntegerArray (nFileHandle, analogValuesBuf);
	
	#IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("FiOps: file read: %d", nNumRead);
	#ENDIF

	FileClose(nFileHandle);

	EndFileOperations();
	
}

// --- Funkcje ---

// +++ Obsluga zdarzen +++

PUSH presetUse
{
    presetIndex = GetLastModifiedArrayIndex();
	FillBuffersFromFile();
	ReadValuesFromBuffer(presetIndex);
}
  
PUSH presetSave
{
	presetIndex = GetLastModifiedArrayIndex();
	FillBufferWithValues(presetIndex);
	WriteBuffersToFile();
}

// --- Obsluga zdarzen ---

// +++ Funkcja Main +++
Function Main()
{
    SIGNED_INTEGER nFileHandle;
	SIGNED_INTEGER foundFile;
	INTEGER i;
	FILE_INFO fileInfo;

	WaitForInitializationComplete();

	filePath = "\\NVRAM\\" + fileName + ".pst";

	StartFileOperations();
	
	foundFile=FindFirst(filePath, fileInfo);
	FindClose();

	EndFileOperations();

	if(foundFile<>0)
	{
		for (i = 1 to PRESETS_COUNT)
		{
			FillBufferWithValues(i);
		}

		WriteBuffersToFile();
	}
	else
	{
		FillBuffersFromFile();
	}

	presetIndex = 1;	
}
// --- Funkcja Main ---