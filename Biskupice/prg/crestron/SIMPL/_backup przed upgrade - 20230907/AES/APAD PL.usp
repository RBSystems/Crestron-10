/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT	PAGEMAIN				1
#DEFINE_CONSTANT	PAGESOURCESELECT		2
#DEFINE_CONSTANT	PAGESOURCECONTROL		3
#DEFINE_CONSTANT	PAGEOTHER				4
#DEFINE_CONSTANT	PAGEROOMSELECT			5
#DEFINE_CONSTANT	PAGEMESSAGE				6
#DEFINE_CONSTANT	PAGETOOLS1				7
#DEFINE_CONSTANT	PAGETOOLS2				8
#DEFINE_CONSTANT	PAGETOOLS3				9
#DEFINE_CONSTANT	PAGEGROUPS				10
#DEFINE_CONSTANT	PAGESELECTROOMOFF		11
#DEFINE_CONSTANT	PAGEHOUSE				12
#DEFINE_CONSTANT	PAGEDONOTDISTURB		13
#DEFINE_CONSTANT	PAGESLEEP				14
#DEFINE_CONSTANT	PAGESLEEPADJUST			15
#DEFINE_CONSTANT	PAGESLEEPWARNING		16

#DEFINE_CONSTANT	MAXROOMS				24
#DEFINE_CONSTANT	MAXROOMNAMELENGTH		24

#DEFINE_CONSTANT	MAXSOURCE				11
#DEFINE_CONSTANT	MAXSOURCENAMELENGTH		24
#DEFINE_CONSTANT	SOURCENOTUSED			100

#DEFINE_CONSTANT	OTHERMENUENTRIES		6
#DEFINE_CONSTANT	OTHERMENULENGTH			8

#DEFINE_CONSTANT	MAXGROUPS				6

#DEFINE_CONSTANT	FALSE					0
#DEFINE_CONSTANT	TRUE					1

#DEFINE_CONSTANT	OTHERINDEXROOMS			1
#DEFINE_CONSTANT	OTHERINDEXTOOLS			2
#DEFINE_CONSTANT	OTHERINDEXGROUPS		3
#DEFINE_CONSTANT	OTHERINDEXSLEEP			4
#DEFINE_CONSTANT	OTHERINDEXDONOTDISTURB	5

#DEFINE_CONSTANT	PRIORITYMODEOFF			0
#DEFINE_CONSTANT	PRIORITYMODELISTENONLY	1
#DEFINE_CONSTANT	PRIORITYMODEOVERRIDE	2

#DEFINE_CONSTANT	SOURCE_NOT_SET_MESSAGE	"[Brak wybranego zrodla]"


#CATEGORY "4" 
#DEFAULT_VOLATILE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

DIGITAL_INPUT RoomOnFb;
DIGITAL_INPUT ExitSourceControl;
DIGITAL_INPUT CycleRoomSource;
DIGITAL_INPUT ExitTools;
DIGITAL_INPUT ExitSourceSetup;
DIGITAL_INPUT DefaultRoomOnFb;
DIGITAL_INPUT RoomConnected;
DIGITAL_INPUT SystemBuilder;
DIGITAL_INPUT HouseMenuEnabled;
DIGITAL_INPUT ExitHouseMenu;
DIGITAL_INPUT SystemInitialized;
DIGITAL_INPUT AllSourcesDisabled;
DIGITAL_INPUT InterruptActive;
DIGITAL_INPUT EnableDoNotDisturbButton;
DIGITAL_INPUT EnableSleepButton;
DIGITAL_INPUT SleepWarning;
DIGITAL_INPUT PriorityModeControlOk;
DIGITAL_INPUT PriorityModeControlFailed;
DIGITAL_INPUT PriorityModeControlRemoved;
DIGITAL_INPUT PSTActive;

DIGITAL_INPUT Power;
DIGITAL_INPUT Enter;
DIGITAL_INPUT KnobLeft;
DIGITAL_INPUT KnobRight;
DIGITAL_INPUT SoftButton3Held;
DIGITAL_INPUT SoftButton2Held;
DIGITAL_INPUT SoftKey[4];
DIGITAL_INPUT GroupActive[MAXGROUPS];
DIGITAL_INPUT GroupDisabled[MAXGROUPS];
DIGITAL_INPUT SourceDisabled[MAXSOURCE];
DIGITAL_INPUT RoomDisabled[MAXROOMS];

ANALOG_INPUT TotalRoomEntries;
ANALOG_INPUT DefaultRoom;
ANALOG_INPUT DrivenRoomNumber;
ANALOG_INPUT CurrentSource;
ANALOG_INPUT CurrentSleepTime;
ANALOG_INPUT NewSleepTime;
ANALOG_INPUT PriorityMode;
ANALOG_INPUT TheaterAudioInput;

STRING_INPUT ExternalSourceName$[24];
STRING_INPUT InterruptMessage$[100];

ANALOG_INPUT RoomEquipmentID[MAXROOMS];
ANALOG_INPUT SourceDeviceType[MAXSOURCE];
ANALOG_INPUT SourceOwner[MAXSOURCE];
STRING_INPUT RoomNames$[25][MAXROOMNAMELENGTH];
STRING_INPUT GroupNames$[MAXGROUPS][24];
STRING_INPUT SourceNames$[MAXSOURCE][MAXSOURCENAMELENGTH];
ANALOG_INPUT ListPosition[MAXSOURCE];

DIGITAL_OUTPUT RoomConnect;
DIGITAL_OUTPUT RoomDisconnect;
DIGITAL_OUTPUT RoomOn;
DIGITAL_OUTPUT RoomOff;
DIGITAL_OUTPUT SourceConnect;
DIGITAL_OUTPUT SourceDisconnect;
DIGITAL_OUTPUT ControllingForeignRoom;
DIGITAL_OUTPUT DefaultRoomOff;
DIGITAL_OUTPUT ShowInterruptSubpage;
DIGITAL_OUTPUT DigitalOut[6];
DIGITAL_OUTPUT GroupOn[MAXGROUPS];
DIGITAL_OUTPUT GroupOff[MAXGROUPS];

ANALOG_OUTPUT CurrentPage;
ANALOG_OUTPUT CurrentSubPage;
ANALOG_OUTPUT RoomEquipmentIdSelected;
ANALOG_OUTPUT NowPlayingIndex;
ANALOG_OUTPUT SourceGUIIdSelected;
ANALOG_OUTPUT SourceEquipmentIdSelected;
ANALOG_OUTPUT NewSourceRequested;
ANALOG_OUTPUT ScrollBar;
ANALOG_OUTPUT NewSleepTimeOut;
ANALOG_OUTPUT PriorityModeSourceControlRequested;
ANALOG_OUTPUT PriorityModeSourceControlOverride;

STRING_OUTPUT CurrentSource$;
STRING_OUTPUT SoftKey$[4];
STRING_OUTPUT SerialOut$[5];


INTEGER CurrentRoom;
INTEGER SourceSemaphore;
//INTEGER SourceDeviceType[MAXSOURCE];
INTEGER CurrentSourceControllable;
INTEGER LastSourceRequested;
INTEGER PreviewSource;
INTEGER PreviewRoom;
INTEGER ScrollIndex;
INTEGER ScrollHighlight;
INTEGER ScrollMax;
INTEGER CurrentMessage;
INTEGER PreviousPage;
INTEGER PageOtherIndex;
INTEGER SourceSelectCallingPage;
INTEGER OtherIndex[6];
INTEGER TotalOtherEntries;
INTEGER WaitingForSourceControl;

INTEGER LastUsedListPosition;
INTEGER SourceReorderArray[MAXSOURCE];

STRING CurrentSourceInt$[24];
STRING OtherMenu$[OTHERMENUENTRIES][OTHERMENULENGTH];

FUNCTION CalculateScrollBar(INTEGER Total, INTEGER Index)
	{
	if(Index <= 1)
		ScrollBar = 65535;
	else if((Index + 3 - 1) >= Total)
		ScrollBar = 0;
	else
		ScrollBar = -((65535/(Total - 3)) * (Index - 1));
	}

STRING_FUNCTION GetSourceOwnerName(INTEGER Index)
	{
	INTEGER i;
	
	if((SourceOwner[CurrentSource] & 0x03FF) > 0)		//Source in use by another room
		return(RoomNames$[SourceOwner[CurrentSource] & 0x03FF]);
	else if((SourceOwner[CurrentSource] & 0xFD00) > 0)	//Source in use by one or more groups
		{
		for(i = 1 to MAXGROUPS)
			{
			if((SourceOwner[CurrentSource] & (0x0200 << i)) > 0)
				{
				Return(GroupNames$[i]);
				break;
				}
			}
		}
	else
		{
		Return("inna strefa.");
		}
	}
	
INTEGER_FUNCTION GetNextRoom(INTEGER Index)
	{
	INTEGER i;
	INTEGER Counter;
	INTEGER NewRoom;
	
	NewRoom = Index;
	Counter = Index;
	for(i = 1 to MAXROOMS)
		{
		if(Counter < MAXROOMS)
			Counter = Counter + 1;
		else
			Counter = 1;
		if(RoomDisabled[Counter] = FALSE)
			{
			NewRoom = Counter;
			break;
			}
		}
	return(NewRoom);
	}

INTEGER_FUNCTION GetPreviousRoom(INTEGER Index)
	{
	INTEGER i;
	INTEGER Counter;
	INTEGER NewRoom;
	
	NewRoom = Index;
	Counter = Index;
	for(i = 1 to MAXROOMS)
		{
		if(Counter > 1)
			Counter = Counter - 1;
		else
			Counter = MAXROOMS;
		if(RoomDisabled[Counter] = FALSE)
			{
			NewRoom = Counter;
			break;
			}
		}
	return(NewRoom);
	}
	
Function EvaluateRoomControlled()
	{
	INTEGER i;
	
	if(CurrentRoom > 0)
		{
		if(CurrentRoom = DefaultRoom)
			ControllingForeignRoom = FALSE;
		else
			ControllingForeignRoom = TRUE;
		}
	else
		ControllingForeignRoom = FALSE;
	i = 1;
	OtherIndex[i] = OTHERINDEXROOMS;
	i = i + 1;
	OtherIndex[i] = OTHERINDEXTOOLS;
	if(AllSourcesDisabled = FALSE)
		{
		i = i + 1;
		OtherIndex[i] = OTHERINDEXGROUPS;
		}
	if((EnableSleepButton = 1) && (RoomOnFb = 1))		
		{
		i = i + 1;
		OtherIndex[i] = OTHERINDEXSLEEP;
		}
	if(EnableDoNotDisturbButton = 1)
		{
		i = i + 1;
		OtherIndex[i] = OTHERINDEXDONOTDISTURB;
		}
	TotalOtherEntries = i;
	}
	
FUNCTION EvaluateCurrentSource()
	{
	if((SourceDeviceType[CurrentSource] > 0) && (SourceDeviceType[CurrentSource] <> 6) && (SourceDisabled[CurrentSource] = FALSE) && (AllSourcesDisabled = FALSE))
		CurrentSourceControllable = TRUE;
	else
		CurrentSourceControllable = FALSE;
	}
		
Function InitMainMenu()
	{
	INTEGER i;
	
	CurrentPage = PageMain;
	CurrentSubpage = 0;
	SerialOut$[1] = CurrentSourceInt$;
	if(CurrentRoom <> DefaultRoom)
		{
		SerialOut$[2] = RoomNames$[CurrentRoom];
		SoftKey$[1] = "Wyjscie";
		}
	else
		{
		SerialOut$[2] = "";
		if(HouseMenuEnabled = TRUE)
			SoftKey$[1] = "Dom";
		else
			SoftKey$[1] = "";
		}
	SerialOut$[3] = "";
	SerialOut$[4] = "";
	SerialOut$[5] = RoomNames$[CurrentRoom];
	if(AllSourcesDisabled = FALSE)
		{
		SoftKey$[2] = "Zrodlo";
		if(CurrentSourceControllable = TRUE)
			SoftKey$[3] = "Sterowanie";
		else
			SoftKey$[3] = "";
		}
	else
		{
		SoftKey$[2] = "";
		SoftKey$[3] = "";
		}
	SoftKey$[4] = "Inne";
	NowPlayingIndex = 0;
	if((CurrentSource > 0) && (AllSourcesDisabled = FALSE))
		NowPlayingIndex = CurrentSource;
	}
	
Function InitGroupPage()
	{
	CurrentPage = PAGEGROUPS;
	SoftKey$[1] = "Menu";
	SoftKey$[2] = "";
	SoftKey$[3] = "";
	SoftKey$[4] = "";
	ScrollIndex = 1;
	ScrollHighlight = 1;
	ScrollMax = 6;
	}				
	
Function InitPageOther()
	{
	INTEGER i;
	
	CurrentPage = PAGEOTHER;
	SerialOut$[1] = CurrentSourceInt$;
	if(CurrentRoom <> DefaultRoom)
		{
		SerialOut$[2] = RoomNames$[CurrentRoom];
		}
	else
		{
		SerialOut$[2] = "";
		}
	SerialOut$[3] = "";
	SerialOut$[4] = "";
	NowPlayingIndex = 0;
	if(CurrentSource > 0)
		NowPlayingIndex = CurrentSource;
	SoftKey$[1] = "Menu";
	SoftKey$[2] = OtherMenu$[OtherIndex[PageOtherIndex * 2 - 1]];
	if((PageOtherIndex * 2) <= TotalOtherEntries) 
   		SoftKey$[3] = OtherMenu$[OtherIndex[PageOtherIndex * 2]];
   	else
   		SoftKey$[3] = "";
   	if(TotalOtherEntries > 2)
   		SoftKey$[4] = "Wiecej";
   	else
   		SoftKey$[4] = "";
   	}
	
Function DrawGroupPage(INTEGER Index, INTEGER Highlight, INTEGER Total)
	{
	INTEGER i;
	
	for(i = 1 to 3)
		{
		if((Index + i - 1) <= Total)
			{
			SerialOut$[i] = GroupNames$[Index + i - 1];
			if(GroupActive[Index + i - 1] = TRUE)
				DigitalOut[i + 3] = TRUE;
			else
				DigitalOut[i + 3] = FALSE;
			}
		else
			{
			SerialOut$[i] = "";
			DigitalOut[i + 3] = FALSE;
			}
		if((Index + i - 1) = Highlight)
			DigitalOut[i] = 1;
		else
			DigitalOut[i] = 0;
		}
	Call CalculateScrollbar(Total, Index);
	}

Function StartGroupNotValidWait()
	{
	wait(400, GroupNotValidWait)
		{
		CurrentMessage = 0;
		CurrentPage = PAGEGROUPS;
		Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
		}
	}

Function StartSourceSelectTimer()
	{
	wait(1000, SourceSelectWait)
		{
		if(SourceSelectCallingPage = PAGEMAIN)
			Call InitMainMenu();
		else if(SourceSelectCallingPage = PAGETOOLS3)
			{
			SerialOut$[1] = SourceNames$[CurrentSource];
			CurrentPage = PAGETOOLS3;
			}		
		}
	}

Function StartRoomSelectTimer()
	{
	wait(1000, RoomSelectWait)
		{
		PageOtherIndex = 1;
		Call InitPageOther();
		}
	}
	
Function ConnectNewRoom(INTEGER NewRoom)
	{
	CurrentRoom = NewRoom;
	RoomEquipmentIDSelected = RoomEquipmentID[NewRoom];
	RoomConnect = 1;
	RoomConnect = 0;
	}

FUNCTION InitSleepPage()
	{
	CurrentPage = PAGESLEEP;
	Makestring(SerialOut$[2], "%d:%02d", CurrentSleepTime / 60, CurrentSleepTime mod 60);
	SoftKey$[1] = "Menu";
	SoftKey$[2] = "Dopasuj";
	SoftKey$[3] = "Wl.";
	SoftKey$[4] = "Wyl.";
	}			
	
Function GotoPreviousMenu()
	{
	if((PreviousPage = PAGEMAIN) || (PreviousPage = PAGESOURCESELECT))
		{
		Call InitMainMenu();
		}
	else if((PreviousPage = PAGEOTHER) || (PreviousPage = PAGEROOMSELECT))
		{
		Call InitPageOther();
		}
	else if((PreviousPage = PAGEGROUPS) || (PreviousPage = PAGETOOLS1) || (PreviousPage = PAGETOOLS2) || (PreviousPage = PAGETOOLS3)) 
		{
		CurrentPage = PreviousPage;
		}
	else if(PreviousPage = PAGEMESSAGE)
		{
		if((CurrentMessage = 1) || (CurrentMessage = 2) || (CurrentMessage = 6) || (CurrentMessage = 4) || (CurrentMessage = 5) || (CurrentMessage = 7))
			{
			Call InitMainMenu();
			}
		if(CurrentMessage = 3)
			{
			CurrentPage = PAGEGROUPS;
			Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
			}
		}
	else if(PreviousPage = PAGESOURCECONTROL)
		{
		SourceConnect = 1;
		SourceConnect = 0;
		CurrentPage = PreviousPage;
		}
	else if((PreviousPage = PAGESLEEP) || (PreviousPage = PAGESLEEPADJUST))
		{
		Call InitSleepPage();
		}
	}
	
Function InitSourceSelectPage()
	{
	INTEGER i;
	
	CurrentPage = PAGESOURCESELECT;
	CurrentSubpage = 0;
	//If no source has been selected, set the first position to be shown on the list even if it is disabled
	if(CurrentSource = 0)
	{
		PreviewSource = 1;
	}	
	else
	{
		if(SourceReorderArray[CurrentSource] = SOURCENOTUSED)
		{
			PreviewSource = 1;
		}
		else
		{
			PreviewSource = SourceReorderArray[CurrentSource];
		}
    }

	NowPlayingIndex = 0;

	//If the list position is not set and a gap is available, set the "Source not set" message or set the appropriate source name
	if(ListPosition[PreviewSource] = 0)
	{
		SerialOut$[1] = SOURCE_NOT_SET_MESSAGE;
	}
	else
	{
		Makestring(SerialOut$[1], "[%s]", SourceNames$[ListPosition[PreviewSource]]);
		NowPlayingIndex = ListPosition[PreviewSource];
	}

	SerialOut$[3] = "";
	SerialOut$[4] = "";
	Softkey$[1] = "Menu";
	SoftKey$[2] = "";
	SoftKey$[3] = "";
	SoftKey$[4] = "";
	Call StartSourceSelectTimer();
	}		

FUNCTION ProcessOtherButton(INTEGER PageIndex, INTEGER Index)
	{
	INTEGER Operation;
	
	if(((Index > 1) && (Index < 4)) && (((PageIndex - 1) * 2 + Index - 1) <= TotalOtherEntries))
		{
		Operation = (PageIndex - 1) * 2 + Index - 1;
		Operation = OtherIndex[Operation];
		cswitch(Operation)
			{
			case(OTHERINDEXROOMS):
				{
				CurrentPage = PAGEROOMSELECT;
				PreviewRoom = GetNextRoom(CurrentRoom);
				SerialOut$[1] = RoomNames$[CurrentRoom];
				SerialOut$[2] = "Wybierz strefe";
				SerialOut$[3] = "do sterowania";
				Makestring(SerialOut$[4], "[%s]", RoomNames$[PreviewRoom]);
				Softkey$[1] = "Menu";
				SoftKey$[2] = "";
				SoftKey$[3] = "";
				SoftKey$[4] = "Domyslne";
				Call StartRoomSelectTimer();
	            break;
	            }
	        case(OTHERINDEXTOOLS):
	        	{
	        	CurrentPage = PAGETOOLS1;
	        	break;
	        	}
	        case(OTHERINDEXGROUPS):
	        	{
	        	Call InitGroupPage();
				Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
				break;
				}
			case(OTHERINDEXSLEEP):
				{
				SerialOut$[1] = RoomNames$[CurrentRoom];
				Call InitSleepPage();
				break;
				}
			case(OTHERINDEXDONOTDISTURB):
				{
				SerialOut$[1] = RoomNames$[CurrentRoom];
				CurrentPage = PAGEDONOTDISTURB;
				break;
				}
			}				   
		}
	else if(Index = 4)
		{
		if((PageIndex = 1) && (TotalOtherEntries > 2))
			{
			PageOtherIndex = PageOtherIndex + 1;
			Call InitPageOther();
			}
		else if(PageIndex = 2)
			{
			if(TotalOtherEntries > 4)
				PageOtherIndex = PageOtherIndex + 1;
			else
				PageOtherIndex = 1;
			Call InitPageOther();
			}
		else if(PageIndex = 3)
			{
			PageOtherIndex = 1;
			Call InitPageOther();
			}
		}
	}
	
FUNCTION InitSourceControl()
	{
	CurrentPage = PAGESOURCECONTROL;
	SourceGUIIdSelected = SourceDeviceType[CurrentSource];
	SourceEquipmentIDSelected = CurrentSource;
	SourceConnect = 1;
	SourceConnect = 0;
	}
	
FUNCTION WaitForSourceControlResponse()
	{
	Wait(200, SourceControlWait)
		{
		WaitingForSourceControl = FALSE;
		}
	}
/*	
FUNCTION Startup()
	{
	if(TotalRoomEntries > 0)
		{
		if(CurrentPage = PAGESOURCECONTROL)
			{
			SourceDisconnect = 1;
			SourceDisconnect = 0;
			}
		Call ConnectNewRoom(DefaultRoom);
		}
    else
       	{
       	RoomDisconnect = 1;
       	RoomDisconnect = 0;
       	}
	Call EvaluateRoomControlled();
	Call InitMainMenu();
	SerialOut$[5] = RoomNames$[CurrentRoom];
    }
*/
FUNCTION Startup()
	{
	Integer i;

	//Store the first index of the source in the list.  Save only if the location has not been set and is a valid source.
	for(i = 1 to MAXSOURCE)
	{
		if((SourceReorderArray[ListPosition[i]] = SOURCENOTUSED) && (ListPosition[i] <> 0))
			SourceReorderArray[ListPosition[i]] = i;
	}

	//Determine the last used index of the reorder array so that the list is not scrolled to disabled sources
	//beyond the last used one.
	for(i = MAXSOURCE to 1 step -1)
	{
		if(ListPosition[i] <> 0)
		{
			LastUsedListPosition = i;
			break;
		}
	}

	if(CurrentPage = PAGESOURCECONTROL)
		{
		SourceDisconnect = 1;
		SourceDisconnect = 0;
		}
	Call ConnectNewRoom(DefaultRoom);
	Call EvaluateRoomControlled();
	Call InitMainMenu();
	SerialOut$[5] = RoomNames$[CurrentRoom];
    }
					
PUSH CycleRoomSource
	{
	if((CurrentRoom > 0) && (CurrentRoom <> DefaultRoom))
		CurrentSource$ = RoomNames$[CurrentRoom];
	}

RELEASE CycleRoomSource
	{
	if(CurrentSource > 0)
		{
//		if(SourceDeviceType[CurrentSource] = 1)
//			CurrentSource$ = ExternalSourceName$;
//		else
			CurrentSource$ = SourceNames$[CurrentSource];
		}
	else
		CurrentSource$ = "";
	} 
	
PUSH RoomConnected
	{
	if(SystemInitialized = 1)
		{
		Call EvaluateRoomControlled();
		Call InitMainMenu();
		SerialOut$[5] = RoomNames$[CurrentRoom];
		}
	}
	
PUSH SystemInitialized
	{
	Call Startup();
	}
/*	
CHANGE TotalRoomEntries
	{
	Call Startup();
	}
*/
PUSH Power
	{
	cancelwait(SourceSelectWait);
	cancelwait(RoomSelectWait);
	if(CurrentRoom = DefaultRoom)
		{
		if((RoomOnFb = 0) && (AllSourcesDisabled = FALSE))
			{
			RoomOn = 1;
			RoomOn = 0;
			}
		else
			{
			RoomOff = 1;
			RoomOff = 0;
			}
		}
	else if((CurrentRoom > 0) && (CurrentRoom <= MAXROOMS))
		{
		if((RoomOnFb = 0) && (AllSourcesDisabled = FALSE))  //Current Room Off
			{
			RoomOn = 1;
			RoomOn = 0;
			}
		else if(DefaultRoomOnFb = 0)						//Default Room Off
			{
			RoomOff = 1;
			RoomOff = 0;
			Call ConnectNewRoom(DefaultRoom);
			}
		else if(CurrentPage <> PAGESELECTROOMOFF)			//Both Rooms On and not already on "Select Room Off" page
			{
			if(CurrentPage = PAGESOURCECONTROL)
				{
				SourceDisconnect = 1;
				SourceDisconnect = 0;
				}
			PreviousPage = CurrentPage;
			CurrentPage = PAGESELECTROOMOFF;
			ScrollHighlight = 1;
			SerialOut$[1] = "Ktora strefe wylaczyc?";
			SerialOut$[2] = RoomNames$[DefaultRoom];
			SerialOut$[3] = RoomNames$[CurrentRoom];
			SerialOut$[4] = "";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "";
			SoftKey$[4] = "Anuluj";
			DigitalOut[1] = 1;
			DigitalOut[2] = 0;
			}				
		}
	}
	
PUSH SoftKey
	{
	INTEGER Index;
	INTEGER i;
	
	Index = getlastmodifiedarrayindex();
	cswitch(Index)
		{
		case(1):
			{
			if(CurrentPage = PAGEMAIN)
				{
				if(CurrentRoom <> DefaultRoom)
					{
					if(RoomOnFb = 0)
						{
						Call ConnectNewRoom(DefaultRoom);
						}
					else
						{
						CurrentPage = PAGEMESSAGE;
						CurrentMessage = 2;
						SerialOut$[1] = RoomNames$[CurrentRoom];
						SerialOut$[2] = "Ta strefa jest aktualnie";
						SerialOut$[3] = "wlaczona. Czy chcesz";
						SerialOut$[4] = "ja wylaczyc?";
						SoftKey$[1] = "Tak";
						SoftKey$[2] = "Nie";
						SoftKey$[3] = "";
						SoftKey$[4] = "Anuluj";
						}
					}
				else if(HouseMenuEnabled = TRUE)
					{
					CurrentPage = PAGEHOUSE;
					}
				}
			else if(CurrentPage = PAGEOTHER)
				{
				Call InitMainMenu();
				}
			else if(CurrentPage = PAGESOURCESELECT)
				{
				Cancelwait(SourceSelectWait);
				if(SourceSelectCallingPage = PAGEMAIN)
					Call InitMainMenu();
				else if(SourceSelectCallingPage = PAGETOOLS3)
					{
					SerialOut$[1] = SourceNames$[CurrentSource];
					CurrentPage = PAGETOOLS3;
					}
				}
			else if(CurrentPage = PAGEROOMSELECT)
				{
				Cancelwait(RoomSelectWait);
				Call InitPageOther();
				}
			else if((CurrentPage = PAGEGROUPS) || (CurrentPage = PAGESLEEP) || (CurrentPage = PAGEDONOTDISTURB))
				{
				Call InitPageOther();
				}
			else if((CurrentPage = PAGEMESSAGE) && (CurrentMessage = 2))
				{
				CurrentMessage = 0;
				RoomOff = 1;
				RoomOff = 0;
				Call ConnectNewRoom(DefaultRoom);
				}
			else if((CurrentPage = PAGEMESSAGE) && (CurrentMessage = 3))
				{
				Cancelwait(GroupNotValidWait);
				CurrentMessage = 0;
				CurrentPage = PAGEGROUPS;
				Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
				}
			else if((CurrentPage = PAGEMESSAGE) && ((CurrentMessage = 4) || (CurrentMessage = 5)))
				{
				CurrentMessage = 0;
				Call InitMainMenu();
				}
			else if(CurrentPage = PAGESLEEP)
				{
				Call InitPageOther();
				}
			else if(CurrentPage = PAGESLEEPADJUST)
				{
				Call InitSleepPage();
				}
			else if(CurrentPage = PAGESLEEPWARNING)
				{
				Call GotoPreviousMenu();
				}
			break;
			}
		case(2):
			{
			if((CurrentPage = PAGEMAIN) && (AllSourcesDisabled = FALSE) && (InterruptActive = FALSE))
				{
				SourceSelectCallingPage = CurrentPage;
				Call InitSourceSelectPage();
				}
			else if(CurrentPage = PAGEOTHER)
				{
				Call ProcessOtherButton(PageOtherIndex, 2);
				}
			else if((CurrentPage = PAGEMESSAGE) && (CurrentMessage = 2))
				{
				CurrentMessage = 0;
				Call ConnectNewRoom(DefaultRoom);
				}
			else if((CurrentPage = PAGETOOLS3) && (AllSourcesDisabled = FALSE))
				{
				SourceSelectCallingPage = CurrentPage;
				Call InitSourceSelectPage();
				}	
			else if((CurrentPage = PAGESLEEP) || (CurrentPage = PAGESLEEPWARNING))
				{
				CurrentPage = PAGESLEEPADJUST;
				Makestring(SerialOut$[2], "[%d:%02d]", CurrentSleepTime / 60, CurrentSleepTime mod 60);
				SoftKey$[1] = "Menu";
				SoftKey$[2] = "";
				SoftKey$[3] = "Ustaw";
				SoftKey$[4] = "Anuluj";
				}	
			break;
			}
		case(3):
			{
			if(CurrentPage = PAGEMAIN)
				{
				if((CurrentSourceControllable = TRUE) && (AllSourcesDisabled = FALSE))
					{
					if(PriorityMode = PRIORITYMODEOFF)
						{
						Call InitSourceControl();
						}
					else if((PriorityMode = PRIORITYMODELISTENONLY) || (PriorityMode = PRIORITYMODEOVERRIDE))
						{
						PriorityModeSourceControlRequested = 0;
						processlogic();
						WaitingForSourceControl = TRUE;
						PriorityModeSourceControlRequested = CurrentSource;
						Call WaitForSourceControlResponse();
						}
					}
				}
			else if(CurrentPage = PAGEOTHER)
				{
				Call ProcessOtherButton(PageOtherIndex, 3);
				}
			else if(CurrentPage = PAGESLEEPADJUST)
				{
				NewSleepTimeOut = NewSleepTime;
				Call InitSleepPage();
				}
			else if(CurrentPage = PAGESLEEPWARNING)
				{
				Call GotoPreviousMenu();
				}
			else if(CurrentPage = PageMessage)
				{
				if(CurrentMessage = 5)
					{
					CurrentMessage = 0;
					PriorityModeSourceControlOverride = 0;
					processlogic();
					PriorityModeSourceControlOverride = CurrentSource;
					Call InitSourceControl();
					}
				}
			break;
			}
		case(4):
			{
			if(CurrentPage = PAGEMAIN)
				{
				PageOtherIndex = 1;
				Call InitPageOther();
				}
			else if(CurrentPage = PAGEOTHER)
				{
				Call ProcessOtherButton(PageOtherIndex, 4);
				}
			else if(CurrentPage = PAGEROOMSELECT)
				{
				Cancelwait(RoomSelectWait);
				Call ConnectNewRoom(DefaultRoom);
				}
			else if(CurrentPage = PAGEMESSAGE)
				{
				if((CurrentMessage = 2) || (CurrentMessage = 4))
					{
					CurrentMessage = 0;
					Call InitMainMenu();
					}
				}
			else if(CurrentPage = PAGESELECTROOMOFF)
				{
				Call GotoPreviousMenu();
				}
			else if(CurrentPage = PAGESLEEPADJUST)
				{
				Call InitSleepPage();
				}
			else if(CurrentPage = PAGESLEEPWARNING)
				{
				Call GotoPreviousMenu();
				}
			break;
			}
		}
	}
	
PUSH KnobLeft
	{
	INTEGER i;
	INTEGER Counter;
	
	if(CurrentPage = PAGESOURCESELECT)
	{
		Cancelwait(SourceSelectWait);
		Counter = PreviewSource;
		
		if(Counter > 1)
			Counter = Counter - 1;
		else
			Counter = LastUsedListPosition;

		if(Counter <> PreviewSource)
		{
			PreviewSource = Counter;

			NowPlayingIndex = 0;

			if(ListPosition[PreviewSource] = 0)
			{
				SerialOut$[1] = SOURCE_NOT_SET_MESSAGE;
			}
			else
			{
				Makestring(SerialOut$[1], "[%s]", SourceNames$[ListPosition[PreviewSource]]);
				NowPlayingIndex = ListPosition[PreviewSource];
			}
		}

		Call StartSourceSelectTimer();			
	}
	else if(CurrentPage = PAGEROOMSELECT)
		{
		Cancelwait(RoomSelectWait);
		PreviewRoom = GetPreviousRoom(PreviewRoom);
		Makestring(SerialOut$[4], "[%s]", RoomNames$[PreviewRoom]);
		Call StartRoomSelectTimer();
		}
	else if(CurrentPage = PAGEGROUPS)
		{
		if(ScrollHighlight > 1)
	    	{
	    	ScrollHighlight = ScrollHighlight - 1;
	    	if(ScrollHighlight < ScrollIndex)
	    		{
	    		ScrollIndex = ScrollHighlight;
				}
			Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
			}
        }
    else if(CurrentPage = PAGESELECTROOMOFF)
       	{
       	ScrollHighlight = 1;
       	DigitalOut[1] = 1;
       	DigitalOut[2] = 0;
       	}		
	}		

PUSH KnobRight
	{
	INTEGER i;
	INTEGER Counter;
	
	if(CurrentPage = PAGESOURCESELECT)
	{
		Cancelwait(SourceSelectWait);
		Counter = PreviewSource;
	
		if(Counter < LastUsedListPosition)
			Counter = Counter + 1;
		else
			Counter = 1;

		if(Counter <> PreviewSource)
		{
			PreviewSource = Counter;

			NowPlayingIndex = 0;

			if(ListPosition[PreviewSource] = 0)
			{
				SerialOut$[1] = SOURCE_NOT_SET_MESSAGE;
			}
			else
			{
				Makestring(SerialOut$[1], "[%s]", SourceNames$[ListPosition[PreviewSource]]);
				NowPlayingIndex = ListPosition[PreviewSource];
			}
		}
			
		Call StartSourceSelectTimer();
	}
	else if(CurrentPage = PAGEROOMSELECT)
		{
		Cancelwait(RoomSelectWait);
		PreviewRoom = GetNextRoom(PreviewRoom);
		Makestring(SerialOut$[4], "[%s]", RoomNames$[PreviewRoom]);
		Call StartRoomSelectTimer();
		}
	else if(CurrentPage = PAGEGROUPS)
		{
		if(ScrollHighlight < ScrollMax)
	    	{
	    	ScrollHighlight = ScrollHighlight + 1;
	    	if(ScrollHighlight > ScrollIndex + 3 - 1)
	    		{
	    		ScrollIndex = ScrollIndex + 1;
				}
			Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
			}
        }				
	else if(CurrentPage = PAGESELECTROOMOFF)
       	{
       	ScrollHighlight = 2;
       	DigitalOut[1] = 0;
       	DigitalOut[2] = 1;
       	}		
	}		

PUSH Enter
	{
	if((CurrentPage = PAGEMAIN) || (CurrentPage = PAGEOTHER))
		{
		if((CurrentSourceControllable = TRUE) && (AllSourcesDisabled = FALSE))
			{
			if(PriorityMode = PRIORITYMODEOFF)
				{
				Call InitSourceControl();
				}
			else if((PriorityMode = PRIORITYMODELISTENONLY) || (PriorityMode = PRIORITYMODEOVERRIDE))
				{
				PriorityModeSourceControlRequested = 0;
				processlogic();
				WaitingForSourceControl = TRUE;
				PriorityModeSourceControlRequested = CurrentSource;
				Call WaitForSourceControlResponse();
				}
			}
		}
	else if(CurrentPage = PAGESOURCESELECT)
	{
		//Only allow enter to be valid if the list position is used
		if(ListPosition[PreviewSource] <> 0)
		{
			Cancelwait(SourceSelectWait);

			//If the source being selected is already playing, don't try to select it again
			if(ListPosition[PreviewSource] <> CurrentSource)
			{
				NewSourceRequested = ListPosition[PreviewSource];
				LastSourceRequested = ListPosition[PreviewSource];
			}
			else
			{
				if(SourceSelectCallingPage = PAGEMAIN)
				{				
					Call InitMainMenu();
				}
				else if(SourceSelectCallingPage = PAGETOOLS3)
				{
					SerialOut$[1] = SourceNames$[CurrentSource];
					CurrentPage = PAGETOOLS3;
				}
			}
		}
	}
	else if(CurrentPage = PAGEROOMSELECT)
		{
		Cancelwait(RoomSelectWait);
		Call ConnectNewRoom(PreviewRoom);
		}
	else if(CurrentPage = PAGEGROUPS)
		{
		if(GroupActive[ScrollHighlight] = TRUE)
			{
			GroupOff[ScrollHighlight] = 1;
			GroupOff[ScrollHighlight] = 0;
			}
		else
			{
			if(GroupDisabled[ScrollHighlight] = FALSE)
				{
				GroupOn[ScrollHighlight] = 1;
				GroupOn[ScrollHighlight] = 0;
				}
			else
				{
				CurrentPage = PAGEMESSAGE;
				CurrentMessage = 3;
				SerialOut$[1] = "Uwaga!";
				SerialOut$[2] = "Wybrana grupa nie";
				SerialOut$[3] = "zostala skonfigurowana";
				SerialOut$[4] = "";
				SoftKey$[1] = "Menu";
				SoftKey$[2] = "";
				SoftKey$[3] = "";
				SoftKey$[4] = "";
				Call StartGroupNotValidWait();
				}
			}
		}
	else if(CurrentPage = PAGESELECTROOMOFF)
		{
		if(ScrollHighlight = 1)
			{
			DefaultRoomOff = 1;
			DefaultRoomOff = 0;
			Call GotoPreviousMenu();
			}
		else
			{
			RoomOff = 1;
			RoomOff = 0;
			Call ConnectNewRoom(DefaultRoom);
			}
		}
	else if(CurrentPage = PAGESLEEPADJUST)
		{
		NewSleepTimeOut = NewSleepTime;
		Call InitSleepPage();
		}
	else if(CurrentPage = PageMessage)
		{
		if(CurrentMessage = 5)
			{
			CurrentMessage = 0;
			PriorityModeSourceControlOverride = CurrentSource;
			Call InitSourceControl();
			}
		}
	}
	
CHANGE GroupActive
	{
	if(CurrentPage = PAGEGROUPS)
		{
		Call DrawGroupPage(ScrollIndex, ScrollHighlight, ScrollMax);
		}
	} 		

CHANGE CurrentSource
	{
	if(CurrentSource > 0)
		{
		Call EvaluateCurrentSource();
		}
	else
		CurrentSourceControllable = FALSE;
	if((CurrentSource > 0) && (AllSourcesDisabled = FALSE))
		{
		NowPlayingIndex = 0;
		NowPlayingIndex = CurrentSource;
		}
	else
		NowPlayingIndex = 0;
	if(CurrentSource = 0)
		{
		CurrentSource$ = "";
		CurrentSourceInt$ = "";
		SourceDisconnect = 1;
		SourceDisconnect = 0;
		Call InitMainMenu();
		}
	else
		{
		CurrentSource$ = SourceNames$[CurrentSource];
		CurrentSourceInt$ = SourceNames$[CurrentSource];
		if(CurrentPage = PAGESOURCESELECT)
			{
			if(CurrentSource = LastSourceRequested)
				{
				if(SourceSelectCallingPage = PAGEMAIN)
					Call InitMainMenu();
				else if(SourceSelectCallingPage = PAGETOOLS3)
					{
					SerialOut$[1] = SourceNames$[CurrentSource];
					CurrentPage = PAGETOOLS3;
					}
				}
			else
				{
				CurrentPage = PAGEMESSAGE;
				CurrentMessage = 1;
				SerialOut$[1] = "Uwaga!";
				SerialOut$[2] = "Inny uzytkownik";
				SerialOut$[3] = "wybral nowe zrodlo";
				SerialOut$[4] = "dla tej strefy.";
				SoftKey$[1] = "";
				SoftKey$[2] = "";
				SoftKey$[3] = "";
				SoftKey$[4] = "";
				delay(400);
				CurrentMessage = 0;
				LastSourceRequested = CurrentSource;
				Call InitMainMenu();
				}
			}
		else if(CurrentPage = PAGESOURCECONTROL)
			{
			if(CurrentSource <> LastSourceRequested)
				{
				CurrentPage = PAGEMESSAGE;
				CurrentMessage = 1;
				SerialOut$[1] = "Uwaga!";
				SerialOut$[2] = "Inny uzytkownik";
				SerialOut$[3] = "wybral nowe zrodlo";
				SerialOut$[4] = "dla tej strefy.";
				SoftKey$[1] = "";
				SoftKey$[2] = "";
				SoftKey$[3] = "";
				SoftKey$[4] = "";
				SourceDisconnect = 1;
				SourceDisconnect = 0;
				delay(400);
				CurrentMessage = 0;
				LastSourceRequested = CurrentSource;
				Call InitMainMenu();
				}
			}
		else if(CurrentPage = PAGEMAIN)
			{
			Call InitMainMenu();
			}
		else if(CurrentPage = PAGEOTHER)
			{
			Call InitPageOther();
			}
		else if((CurrentPage = PAGETOOLS1) || (CurrentPage = PAGETOOLS2) || (CurrentPage = PAGETOOLS3))
			{
			SerialOut$[1] = CurrentSourceInt$;
			}
		}
	}
	
PUSH ExitSourceControl
	{
	if(CurrentPage = PAGESOURCECONTROL)
		{
		SourceDisconnect = 1;
		SourceDisconnect = 0;
		Call InitMainMenu();
		}
	}
	
PUSH ExitTools
	{
	if((CurrentPage = PAGETOOLS1) || (CurrentPage = PAGETOOLS2))
		Call InitPageOther();
	}
	
PUSH ExitSourceSetup
	{
	if(CurrentPage = PAGETOOLS3)
		{
		Call InitMainMenu();
		}
	}
	
PUSH SleepWarning
	{
	SerialOut$[1] = RoomNames$[CurrentRoom];
	Makestring(SerialOut$[2], "%d:%02d", CurrentSleepTime / 60, CurrentSleepTime mod 60);
	PreviousPage = CurrentPage;
	CurrentPage = PAGESLEEPWARNING;
	SoftKey$[1] = "Menu";
	SoftKey$[2] = "Dopasuj";
	SoftKey$[3] = "Ok";
	SoftKey$[4] = "Anuluj";
	}
	
PUSH InterruptActive
	{
	if(CurrentPage = PAGESOURCESELECT)
		{
		if(SourceSelectCallingPage = PAGEMAIN)
			Call InitMainMenu();
		else if(SourceSelectCallingPage = PAGETOOLS3)
			{
			SerialOut$[1] = SourceNames$[CurrentSource];
			CurrentPage = PAGETOOLS3;
			}
		}
	if(len(InterruptMessage$) > 0)
		ShowInterruptSubpage = 1;
	}
	
RELEASE InterruptActive
	{
	ShowInterruptSubpage = 0;
	}
	
PUSH PriorityModeControlOk
	{
	Cancelwait(SourceControlWait);
	if(WaitingForSourceControl = TRUE)
		{
		WaitingForSourceControl = FALSE;
		Call InitSourceControl();
		}
	}
	
PUSH PriorityModeControlFailed
	{
	CancelWait(SourceControlWait);
	if((WaitingForSourceControl = TRUE) && ((PriorityMode = PRIORITYMODELISTENONLY) || (PriorityMode = PRIORITYMODEOVERRIDE)))
		{
		WaitingForSourceControl = FALSE;
		CurrentPage = PAGEMESSAGE;
		SerialOut$[1] = "Uwaga!";
		if(PriorityMode = PRIORITYMODELISTENONLY)				//Listen Only
			{
			CurrentMessage = 4;
			SerialOut$[2] = "To zrodlo jest uzywane przez";
			SerialOut$[3] = GetSourceOwnerName(CurrentSource);
			SerialOut$[4] = "Sterowanie niemozliwe.";
			SoftKey$[1] = "Menu";
			SoftKey$[2] = "";
			SoftKey$[3] = "";
			SoftKey$[4] = "Ok";
			}
		else if(PriorityMode = PRIORITYMODEOVERRIDE)
			{
			CurrentMessage = 5;
			SerialOut$[2] = "To zrodlo jest uzywane przez";
			SerialOut$[3] = GetSourceOwnerName(CurrentSource);;
			SerialOut$[4] = "Nacisnij Sterowanie aby nadpisac.";
			SoftKey$[1] = "Menu";
			Softkey$[2] = "";
			SoftKey$[3] = "Sterowanie";
			SoftKey$[4] = "";
			}
		}
	}
	
PUSH PriorityModeControlRemoved
	{
	if(CurrentPage = PAGESOURCECONTROL)
		{
		CurrentPage = PAGEMESSAGE;
		CurrentMessage = 6;
		SerialOut$[1] = "Uwaga!";
		SerialOut$[2] = "Inna strefa przejela";
		SerialOut$[3] = "kontrole nad tym zrodlem.";
		SerialOut$[4] = "";
		SoftKey$[1] = "";
		SoftKey$[2] = "";
		SoftKey$[3] = "";
		SoftKey$[4] = "";
		SourceDisconnect = 1;
		SourceDisconnect = 0;
		delay(400);
		CurrentMessage = 0;
		LastSourceRequested = CurrentSource;
		Call InitMainMenu();
		}
	}		
	
PUSH SoftButton2Held		
	{
	INTEGER Operation;
	
	if(CurrentPage = PAGEOTHER)
		{
		Operation = (PageOtherIndex - 1) * 2 + 1;
		Operation = OtherIndex[Operation];
		if(Operation = OTHERINDEXTOOLS)
			CurrentPage = PAGETOOLS2;
		}
	else if((CurrentSource > 0) && (CurrentSource <= MAXSOURCE) && (CurrentPage = PAGEMAIN))
		{
		SerialOut$[1] = SourceNames$[CurrentSource];
		CurrentPage = PAGETOOLS3;
		}
	}
	
PUSH SoftButton3Held		
	{
	INTEGER Operation;
	
	if(CurrentPage = PAGEOTHER)
		{
		Operation = (PageOtherIndex - 1) * 2 + 2;
		Operation = OtherIndex[Operation];
		if(Operation = OTHERINDEXTOOLS)
			CurrentPage = PAGETOOLS2;
		}
	}
	
RELEASE ExitHouseMenu
	{
	Call InitMainMenu();
	}
	
PUSH RoomOnFb
	{
	Call EvaluateRoomControlled();
	}

RELEASE RoomOnFb
	{
	Call EvaluateRoomControlled();
	}
	
CHANGE CurrentSleepTime
	{
	if((CurrentPage = PAGESLEEP) || (CurrentPage = PAGESLEEPWARNING))
		{
		Makestring(SerialOut$[2], "%d:%02d", CurrentSleepTime / 60, CurrentSleepTime mod 60);
		}
	}
	
CHANGE NewSleepTime
	{
	if(CurrentPage = PAGESLEEPADJUST)
		{
		Makestring(SerialOut$[2], "[%d:%02d]", NewSleepTime / 60, NewSleepTime mod 60);
		}
	}
	
CHANGE TheaterAudioInput
	{
	if(CurrentSource = 11)
		{
		if(CurrentPage = PAGEMAIN)
			{
			Call EvaluateCurrentSource();
			Call InitMainMenu();
			}
		else if(CurrentPage = PAGESOURCECONTROL)
			{
			CurrentPage = PAGEMESSAGE;
			CurrentMessage = 1;
			SerialOut$[1] = "Uwaga!";
			SerialOut$[2] = "Inny uzytkownik";
			SerialOut$[3] = "wybral nowe zrodlo";
			SerialOut$[4] = "dla tej strefy.";
			SoftKey$[1] = "";
			SoftKey$[2] = "";
			SoftKey$[3] = "";
			SoftKey$[4] = "";
			SourceDisconnect = 1;
			SourceDisconnect = 0;
			delay(400);
			CurrentMessage = 0;
			LastSourceRequested = CurrentSource;
			Call InitMainMenu();
			}
		}
	}					
	
PUSH PSTActive
	{
//	PreviousPage = CurrentPage;
	CurrentPage = PAGEMESSAGE;
	CurrentMessage = 7;
	SerialOut$[1] = "Uwaga!";
	SerialOut$[2] = "Pro Sound Tools";
	SerialOut$[3] = "Aktywny";
	SerialOut$[4] = "Sterowanie niemozliwe";
	SoftKey$[1] = "";
	SoftKey$[2] = "";
	SoftKey$[3] = "";
	SoftKey$[4] = "";
	}
	
RELEASE PSTActive
	{
	CurrentMessage = 0;
	Call InitMainMenu();
	}

CHANGE DrivenRoomNumber
{
	if(CurrentRoom <> DrivenRoomNumber)
	{
    	Call ConnectNewRoom(DrivenRoomNumber);
	}
}
       
Function Main()
	{
	INTEGER i;
	
	CurrentRoom = 0;
	SourceSemaphore = FALSE;
	CurrentSourceControllable = FALSE;
	PreviewSource = 0;
	PreviewRoom = 0;
	LastSourceRequested = 0;
	CurrentMessage = 0;
	CurrentSourceInt$ = "";
	for(i = 1 to MAXROOMS)
		{
		RoomNames$[i] = "";
		}
    //Initialize the Source name array and the Reorder Wrapper Array.
	for(i = 1 to MAXSOURCE)
	{
		SourceNames$[i] = "";
		SourceReorderArray[i] = SOURCENOTUSED;
	}
	OtherMenu$[1] = "Strefy";
	OtherMenu$[2] = "Dzwiek";
	OtherMenu$[3] = "Grupy";
	OtherMenu$[4] = "Uspienie";
	OtherMenu$[5] = "DND";
	OtherMenu$[6] = "";
	}
