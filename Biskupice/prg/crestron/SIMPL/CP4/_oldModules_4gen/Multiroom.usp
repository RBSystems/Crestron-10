// +++ Dyrektywy kompilatora +++
#SYMBOL_NAME "Multiroom"
#CATEGORY "40" // Interface-Specific Logic 
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DIGITAL_EXPAND Separately
#ANALOG_SERIAL_EXPAND Separately

// --- Dyrektywy kompilatora ---

// +++ Stale +++
#DEFINE_CONSTANT ZRODLA_ILOSC_MIN 3
#DEFINE_CONSTANT ZRODLA_ILOSC_MAX 16
#DEFINE_CONSTANT POKOJE_ILOSC_MIN 3
#DEFINE_CONSTANT POKOJE_ILOSC_MAX 16

#DEFINE_CONSTANT MODE_ZRODLA 1
#DEFINE_CONSTANT MODE_MAKRA 2
#DEFINE_CONSTANT MODE_STEROWANIE 3

// --- Stale ---

// +++ Wejscia +++
DIGITAL_INPUT enable;
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT zrodlaShow;
DIGITAL_INPUT sterowanieShow;
DIGITAL_INPUT zrodloClicked;
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT _SKIP_;
ANALOG_INPUT wybranaStrefa;
ANALOG_INPUT _SKIP_;
ANALOG_INPUT wybraneZrodlo[POKOJE_ILOSC_MAX, POKOJE_ILOSC_MIN];
// --- Wejscia ---

// +++ Wyjscia +++
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT zrodlaShown_FB;
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT zrodlo_FB[ZRODLA_ILOSC_MAX, ZRODLA_ILOSC_MIN];
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT wybraneZrodlo_FB;
// --- Wyjscia --- 



// +++ Zmienne globalne +++
INTEGER mode; // 1 - zrodla, 2 - pokoje, 3 - sterowanie
INTEGER zrodloSelected;
INTEGER ZRODLA_ILOSC;

// --- Zmienne globalne ---

// +++ Funkcje +++
Function interlockZrodla(INTEGER hiIndex)
{
    INTEGER i;
    
    if (zrodlo_FB[hiIndex] = 1) return;
        
	for (i = 1 to ZRODLA_ILOSC)
    {
    	zrodlo_FB[i] = 0;
    }
	zrodlo_FB[hiIndex] = 1;
    
}

Function switchMode(INTEGER newMode)
{
	switch (newMode)
	{
		case (0):
		{
			interlockZrodla(0);
			zrodlaShown_FB = 0;
			return;
		}
		
		case (MODE_ZRODLA):
		{
			interlockZrodla(0);			
    		zrodlaShown_FB = 1;			
			mode = MODE_ZRODLA;
		}
		
		case (MODE_MAKRA):
		{
			zrodlaShown_FB = 0;
			interlockZrodla(0);
			mode = MODE_MAKRA;
		}
		
		case (MODE_STEROWANIE):
		{
			zrodlaShown_FB = 0;
			interlockZrodla(zrodloSelected);
			mode = MODE_STEROWANIE;
		}
	}
	
	
}

Function zrodlaIloscSet()
{
	INTEGER tempLength, i, lastDefinedIndex;
	
	tempLength = GetNumArrayCols(zrodlo_FB);
	lastDefinedIndex = 0;
	
	for (i = 1 to tempLength)
	{
		if (IsSignalDefined(zrodlo_FB[i])) lastDefinedIndex = i;
	}		
	
	ZRODLA_ILOSC = lastDefinedIndex;
}


// --- Funkcje ---

// +++ Obsluga zdarzen +++
PUSH enable
{

	switchMode(MODE_ZRODLA);

	wybraneZrodlo_FB = zrodloSelected;

}

PUSH zrodlaShow
{
	
	if (!enable) return;
	if ((zrodloSelected <> 0) && (mode <> MODE_STEROWANIE))
	{
		switchMode(MODE_STEROWANIE);
		return;
	}
	switchMode(MODE_ZRODLA);
}

PUSH sterowanieShow
{
	if (!enable) return;
	if ((zrodloSelected <> 0) && (mode <> MODE_STEROWANIE)) switchMode(MODE_STEROWANIE);
	//else switchMode(MODE_ZRODLA);
}
PUSH zrodloClicked
{
	if ((zrodloSelected <> 0) && (mode <> MODE_STEROWANIE)) switchMode(MODE_STEROWANIE);
}


CHANGE wybranaStrefa
{	
	zrodloSelected = wybraneZrodlo[wybranaStrefa];
			
	if (!enable) return;
    
    wybraneZrodlo_FB = zrodloSelected;
    
	if (zrodloSelected = 0) switchMode(MODE_ZRODLA);
	else switchMode(MODE_STEROWANIE);
	
}
 
CHANGE wybraneZrodlo
{	
	INTEGER index;
	
	index = GetLastModifiedArrayIndex();
	
	if (index <> wybranaStrefa) return;
	
	zrodloSelected = wybraneZrodlo[index];	

	if (!enable) return;
	
	wybraneZrodlo_FB = zrodloSelected;
               
               
	if (zrodloSelected = 0) switchMode(MODE_ZRODLA);
	else
	switchMode(MODE_STEROWANIE);
}
 
 
RELEASE enable
{
	switchMode(0);
	wybraneZrodlo_FB = 0;
}

// --- Obsluga zdarzen ---

// +++ Funkcja Main +++
Function Main()
{
    WaitForInitializationComplete();
    
	zrodlaIloscSet();
    
    mode = MODE_ZRODLA;

    zrodloSelected = 0;
    
    switchMode(0);
}
// --- Funkcja Main ---