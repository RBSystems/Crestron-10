//Compiler Directives

#CATEGORY "41" 
#SYMBOL_NAME "sp_Test_SSL"
#HINT ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
#DIGITAL_EXPAND OutputsWithParams

//	Biblioteki
#USER_SIMPLSHARP_LIBRARY "ssl_Residence"

// Stale

#DEFINE_CONSTANT PULSE_TIME 1

// Inputs

DIGITAL_INPUT residenceInitialize, _SKIP_, loop_On_FB, loop_Off_FB, _SKIP_, loop_TOG, _SKIP_, test_1, test_2, test_3, test_4, test_5, test_6;

// Outputs

DIGITAL_OUTPUT residenceInitialized_FB, _SKIP_, loop_On, loop_Off;

//	Parametry
INTEGER_PARAMETER _SKIP_, pHeatingLoopId;

//	Wlasciwosci parametrow
#BEGIN_PARAMETER_PROPERTIES pHeatingLoopId
	propValidUnits = unitDecimal;
	propDefaultUnit = unitDecimal;
	propBounds = 1d , 64d;
#END_PARAMETER_PROPERTIES

//

HeatingLoop gThisLoop;
INTEGER gIsModuleInitialized;

//	Funkcje Callback dla delegat Simpl#
CALLBACK FUNCTION PrintTraceMessageCallback(STRING _message)
{
	trace("%s", _message);
}

CALLBACK FUNCTION TurnHeatingLoopOnCallback()
{
	trace("Wlaczanie petli ID = %d", gThisLoop.Id);
	pulse(PULSE_TIME, loop_On);
}

CALLBACK FUNCTION TurnHeatingLoopOffCallback()
{
	trace("Wylaczanie petli ID = %d", gThisLoop.Id);
	pulse(PULSE_TIME, loop_Off);
}

//	Rejestracja delegat Simpl#
FUNCTION RegisterStaticDelegates()
{
	RegisterDelegate(MessagePrinter, PrintTraceMessage, PrintTraceMessageCallback);
}

FUNCTION RegisterHeatingLoopDelegates()
{
	if (Residence.IsInitialized <> 1) return;
    
	gThisLoop = Residence.HeatingLoopArray[pHeatingLoopId];
	
	RegisterDelegate(gThisLoop, TurnHeatingLoopOn, TurnHeatingLoopOnCallback);
    RegisterDelegate(gThisLoop, TurnHeatingLoopOff, TurnHeatingLoopOffCallback);
} 

//	Funkcje obslugujace zdarzenia Simpl#
EVENTHANDLER ResidenceInitializedHandler(Dummy sender, EventArgs e)
{
	residenceInitialized_FB = 1;
	RegisterHeatingLoopDelegates();
	gIsModuleInitialized = 1;
}

//	Rejestracja obslugi zdarzen Simpl#
FUNCTION RegisterStaticEvents()
{
	RegisterEvent(Residence, ResidenceInitialized, ResidenceInitializedHandler);
}

FUNCTION Register()
{
	RegisterStaticDelegates();
	RegisterStaticEvents();
}

// Event Handlers

PUSH residenceInitialize
{
	Residence.Initialize();
}

PUSH loop_On_FB
{
	if (gIsModuleInitialized <> 1) return;
	
	gThisLoop.UpdatePowerState(1);
}

PUSH loop_Off_FB
{
	if (gIsModuleInitialized <> 1) return;
	
	gThisLoop.UpdatePowerState(0);
}

PUSH loop_TOG
{
	if (gIsModuleInitialized <> 1) return;

	gThisLoop.PowerToggle();
}

threadsafe PUSH test_1
{
	MessagePrinter.PrintDate();
}

threadsafe PUSH test_2
{
	MessagePrinter.PrintThicks();
}

threadsafe PUSH test_3
{
	MessagePrinter.LogError();
}

threadsafe PUSH test_4
{
	MessagePrinter.LogWarning();
}

threadsafe PUSH test_5
{
	MessagePrinter.LogNotice();
}

threadsafe PUSH test_6
{
	MessagePrinter.StartStopWatch();
}

threadsafe RELEASE test_6
{
	MessagePrinter.StopStopWatch();
}

// Main Function

Function Main()
{
	residenceInitialized_FB = 0;
	gIsModuleInitialized = 0;
	Register();
	WaitForInitializationComplete();
	// TODO Init
}
