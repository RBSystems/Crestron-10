/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Christophe Hombrouck
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 1 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT _SKIP_, Turn_On_Control, Turn_Off_Control, Turn_On_Value, Turn_Off_Value, _SKIP_;
// ANALOG_INPUT 
// STRING_INPUT 
STRING_INPUT FeedBack[15];

DIGITAL_OUTPUT Control_Is_On, Control_Is_Off, Value_Is_On, Value_Is_Off,_SKIP_;
// ANALOG_OUTPUT 
STRING_OUTPUT Command;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ObjectID;
// INTEGER_PARAMETER 
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER State,NextState,Value,NextValue;
INTEGER RxOK;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING CommandString[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH Turn_On_Control
{
    MakeString(Command,"\xF0\x06%s\x01%s\x31%s",chr(ObjectID),chr(ObjectID),chr(2+Value));
    NextState = 1;    
}

PUSH Turn_Off_Control
{
    MakeString(Command,"\xF0\x06%s\x01%s\x31%s",chr(ObjectID),chr(ObjectID),chr(Value));
    NextState = 0;
}

PUSH Turn_On_Value
{
    MakeString(Command,"\xF0\x06%s\x01%s\x31%s",chr(ObjectID),chr(ObjectID),chr((2*State)+1));
    NextValue = 1;    
}

PUSH Turn_Off_Value
{
    MakeString(Command,"\xF0\x06%s\x01%s\x31%s",chr(ObjectID),chr(ObjectID),chr(2*State));
    NextValue = 0;
}

/*
RELEASE input
{
    // TODO:  Add code here
}
*/


CHANGE Feedback
{
    if(RxOk)
    {
     	RxOK = 0;
     	if(left(Feedback,10) = "CHANGE OK\x0D")
     	{
     	     State = NextState;
			 Value = NextValue;
     	     if(State)
     	     {
				pulse(10,Control_Is_On);			
     	     }
			 else
			 {
            	pulse(10,Control_Is_Off); 	
			 }
			 if(Value)
			 {
            	pulse(10,Value_Is_On); 	
			 }
			 else
			 {
            	pulse(10,Value_Is_Off); 	
			 }
      	}
     	else if(left(Feedback,13) = "CHANGE STATE:")
     	{
    	     switch(Byte(Feedback,14))
    	     {
	    	    case(0):
				{
	               	pulse(10,Control_Is_Off);
					pulse(10,Value_Is_Off);
				}
				case(1):
				{
	               	pulse(10,Control_Is_Off);
					pulse(10,Value_Is_On);
				}
				case(2):
				{
	               	pulse(10,Control_Is_On);
					pulse(10,Value_Is_Off);
				}
				case(3):
				{
	               	pulse(10,Control_Is_On);
					pulse(10,Value_Is_On);
				}
    	     }
			 State = Byte(Feedback,14);
     	}
     	else
     	{
     	      Feedback = "";
     	}
     	
     	RxOK = 1;
    }
}





/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	State = 0;
	NextState = 0;
	Value = 0;
	NextValue = 0;
	RxOK = 1;
}


