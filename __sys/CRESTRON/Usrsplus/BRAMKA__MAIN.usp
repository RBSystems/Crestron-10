/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name: s3art
System Name:
System Number:
Programmer:  mpm
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
#DEFINE_CONSTANT maxKol 15
#DEFINE_CONSTANT clientLen 4096 // domyslnie 300 // ostatnio 900
#CATEGORY "41" // Remote System Interface
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
#ANALOG_SERIAL_EXPAND AllWithAny
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN 
	Modul bedzie ciagle nawiazywal poloczenie dopoki enable pozostaje na 1.
	Bledy polaczenia sa trace-owane.
	
	Opis parametrow:
		1: Port	- Integer odpowiadajacy portowi polonczenia z serwerem WAGO
		2: IP	- String[15] wpisane IP WAGO (teoretycznie mozne wpisac HostName ale Adagio chyba nie supportuje DNS)
		3: START- String[2] znaki rozpoczynajace pojedyncze wyrazy w ustalonym protokole (tak jak na WAGO)
		4: END	- String[2] znaki konczace pojedyncze wyrazy w ustalonym protokole (tak jak na WAGO)
		3: kolType[]	- Array String[3] do rozpoznawania pojedynczych typow w ustalonym protokole (tak jak na WAGO)
#HELP_END


/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT checkBuffer, enable;
// ANALOG_INPUT 
string_input _SKIP_,_SKIP_;
STRING_INPUT kolOut[maxKol][30];
// BUFFER_INPUT 

DIGITAL_OUTPUT connected;
// ANALOG_OUTPUT 
STRING_OUTPUT _SKIP_, _SKIP_, _SKIP_;
STRING_OUTPUT kolIn[maxKol];

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
TCP_CLIENT wagoClient[clientLen];
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER port;
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER IP[15],START[2],END[2],kolType[maxKol][3];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER semafor,mx,wt;       

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/

PUSH checkBuffer
{
	string test[200];
	test=wagoClient.SocketRxBuf;
	trace("Buffer WAGO:%s",test);

}
    
PUSH enable{ 
	SocketConnectClient(wagoClient,IP,Port,1); 	
}
RELEASE enable
{
	SocketDisconnectClient (wagoClient);
}

/*
CHANGE input
{
    // TODO:  Add code here
}
*/ 

CHANGE kolOut{  
	integer akt;
	string Word[100]; // oryginalnie bylo 50
	
	akt=GetLastModifiedArrayIndex (); 
	
 	if (wagoClient.SocketStatus=2){ 
 		Word=START+kolType[akt]+"_"+kolOut[akt]+END;
 		SocketSend(wagoClient,Word);
		//trace ("Bufor nadawczy: %s", Word);
 	}
 	else{                                                                                                         
 	 	trace ("WARNING: proba wyslania bez polonczenia typu: %s\n przy blendzie: %d\n str: %s\n",kolOut[akt],wagoClient.SocketStatus,kolType[akt]);
 	}
}


SOCKETCONNECT wagoClient
{
    connected = 1;
	semafor = 1;
	clearBuffer(wagoClient.SocketRxBuf); // oryginalnie tego nie bylo
	semafor = 0; // oryginalnie tego nie bylo
}


SOCKETDISCONNECT wagoClient
{  
    connected=0;
	semafor = 0;
	clearBuffer(wagoClient.SocketRxBuf);   

}

SOCKETRECEIVE wagoClient
{                     
	integer f,k;
	string Word[100]; // oryginalnie bylo 50
	string type[10];   
	
	//trace ("wago: %s",wagoClient.SocketRxBuf);  
		  
	if (!semafor)
	{
	 	semafor=1;    
		//trace("odebral cos");  		
		
	 	while (find(END,wagoClient.SocketRxBuf))
		{	 			 		
	 		Word=Remove(END,wagoClient.SocketRxBuf,1);        
	 		
	 		//trace ("Znalazl word: %s",WORD); 
	 		 
	 		f=find(START,Word);
	 		if (f)
			{
				Word=mid(Word,f+len(START),len(Word)+1-f-len(START)-len(END));
	 			
	 			//trace("Word na: %s",Word);
	 			
	 			f=find ("_",Word); 
	 			
	 			if (f)
				{
			 		type=remove("_",Word,1);
			 		type=left(type,f-1);   
			 		
			 		//trace ("Znlazl typ: %s",type);
			 			
		 			for (k=1 to mx)
					{
		 			 	if (type=kolType[k])
						{
		 			 	 	kolIN[k]=Word; 
		 			 	 	break;
		 			 	}
		 			}  
		 			

		 		}    
		 			 		 	
	 		}
	 	
	 	}    
	 	
		clearBuffer(wagoClient.SocketRxBuf); // Wczesniej bylo pod semaforem	    
	
	 	semafor=0;          
	
		//trace("Wyczyscil bufer: %s",wagoClient.SocketRxBuf);  	
		
		// Tutaj bylo	 	
	}                                 


}                       

SOCKETSTATUS wagoClient
{
    // TODO:  Add code here     
    if (wagoClient.SocketStatus<>2)
	{
	    trace ("Blad polaczenia Wago %d",wagoClient.SocketStatus);
	}
}                       
/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{                 
    integer k;
    
    for (k=1 to maxKol)  {
     	if (kolType[k]<>""){
     	 	mx=k;
     	}
    } 
    
    semafor=0;
    wt=0;       
	
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}


