//Compiler Directives
#CATEGORY "41" // Remote System Interface
#SYMBOL_NAME "SATEL_INT-RS_Processor"
#HINT ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// Constants
#DEFINE_CONSTANT BUFFER_SIZE 512
#DEFINE_CONSTANT MAX_FRAME_SIZE 128

#DEFINE_CONSTANT USER_CODE_STRING_SIZE 8
#DEFINE_CONSTANT PREFIX_STRING_SIZE 2
#DEFINE_CONSTANT RESULT_STRING_SIZE 50

#DEFINE_CONSTANT INPUTS_COUNT 256
#DEFINE_CONSTANT ZONES_COUNT 32
#DEFINE_CONSTANT PULSE_TIME 5
#DEFINE_CONSTANT DELAY_TIME 10
#DEFINE_CONSTANT INTERVAL 100

#DEFINE_CONSTANT MAX_ATTEMPTS 3

#DEFINE_CONSTANT KEYBOARD_STRING_SIZE 20

#DEFINE_CONSTANT KEYBOARD_DELIMITER "_"
#DEFINE_CONSTANT KEYBOARD_CMD_ARM "ARM_"
#DEFINE_CONSTANT KEYBOARD_CMD_DISARM "DISARM_"

#DEFINE_CONSTANT FRAME_START "\xFE\xFE"
#DEFINE_CONSTANT FRAME_END "\xFE\x0D"

#DEFINE_CONSTANT SPECIAL_FE "\xFE"
#DEFINE_CONSTANT SPECIAL_F0 "\xF0"
#DEFINE_CONSTANT SPECIAL_FEF0 "\xFE\xF0"

#DEFINE_CONSTANT SPECIAL_FE_INT	0xFE

#DEFINE_CONSTANT INPUTS_QUERY_FRAME "\xFE\xFE\x00\x00\x50\x8A\xFE\x0D"
#DEFINE_CONSTANT ZONES_QUERY_FRAME "\xFE\xFE\x0A\xD7\xEC\xFE\x0D"

#DEFINE_CONSTANT CMD_INPUTS_QUERY "\x00"
#DEFINE_CONSTANT CMD_ZONES_QUERY "\x0A"

#DEFINE_CONSTANT CMD_ZONES_ARM "\x80"
#DEFINE_CONSTANT CMD_ZONES_DISARM "\x84"

#DEFINE_CONSTANT CMD_RESULT "\xEF"

// Inputs
DIGITAL_INPUT enable, tcp_Connected_FB;
DIGITAL_INPUT _SKIP_, _SKIP_;
STRING_INPUT fromKeyboard$[KEYBOARD_STRING_SIZE];
STRING_INPUT _SKIP_;
BUFFER_INPUT Rx$[BUFFER_SIZE];

// Outputs
DIGITAL_OUTPUT tcp_Connect, tcp_Disconnect;
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT input_FB[INPUTS_COUNT];
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT zone_FB[ZONES_COUNT, ZONES_COUNT];
DIGITAL_OUTPUT _SKIP_;
STRING_OUTPUT toKeyboard$;
STRING_OUTPUT _SKIP_;
STRING_OUTPUT Tx$;

// Parameters
INTEGER_PARAMETER _SKIP_, _SKIP_;
STRING_PARAMETER pPrefix[PREFIX_STRING_SIZE];

// Parameter Properietes
#BEGIN_PARAMETER_PROPERTIES pPrefix
   propValidUnits = unitString;
   propDefaultUnit = unitString;
   propDefaultValue = "";
   propShortDescription = "prefix";
#END_PARAMETER_PROPERTIES

// Global Variables
INTEGER gConnectAttemptCounter;
INTEGER gReceiveAttemptCounter;
INTEGER gZoneToArm;
INTEGER gZoneToDisarm;
STRING gUserCode[USER_CODE_STRING_SIZE];

// Functions
STRING_FUNCTION CalculateCRC(STRING _data)
{
	STRING crcString[2];
	INTEGER crc;
	INTEGER dataSize;
	INTEGER i;

	crc = 0x147A;
	dataSize = len(_data);
    
	for (i = 1 to dataSize)
	{
		crc = rotateLeft(crc, 1);
		crc = crc ^ 0xFFFF;
		crc = crc + high(crc) + byte(_data, i);
	}
	
	crcString = chr(high(crc)) + chr(low(crc));

	return(crcString);
}

STRING_FUNCTION CreateFrame(STRING _data)
{
	STRING frame[MAX_FRAME_SIZE];
	INTEGER frameSize;    
	INTEGER byteIndex;    

	frame = _data + CalculateCRC(_data);
	frameSize = len(frame);

	for (byteIndex = 1 to frameSize)
	{
		if (byte(frame, byteIndex) = SPECIAL_FE_INT)
		{
			frame = left(frame, byteIndex) + SPECIAL_F0 + right(frame, frameSize - byteIndex);
			frameSize = frameSize + 1;
			byteIndex = byteIndex +1;
        }
	}
	
	frame = FRAME_START + frame + FRAME_END;
	
	return(frame);
}

/*
8 bytes - user code (with prefix, if required by INTEGRA), e.g.:

if code is '1234', no prefixes: 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
if code is '12345', no prefixes: 0x12, 0x34, 0x5F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF (???)
if code is '1234', prefix is '97': 0x97, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
*/
STRING_FUNCTION UserCodeToBytes(STRING _userCode, STRING _prefix)
{
	STRING tempData[10];
	STRING data[8];

	INTEGER tempDataSize;
	INTEGER i;
    
	data = "";
	tempData = _prefix + _userCode;
    
    if(len(_prefix) = 1) tempData = "0" + tempData;

	if(len(_userCode) % 2 = 1) tempData = tempData + "F";

	tempDataSize = len(tempData);
         
	for (i = 1 to tempDataSize step 2) data = data + chr(hextoi(mid(tempData, i, 2)));

	tempDataSize = tempDataSize/2;
	
    for (i = tempDataSize + 1 to 8) data = data + "\xFF";
	
	return(data);
}
/*
4 bytes - zone ID:

if partition 1 have to be armed: 0x01, 0x00, 0x00, 0x00
if partition 29 have to be armed: 0x00, 0x00, 0x00, 0x10
*/
STRING_FUNCTION ZoneIdToBytes(INTEGER _zoneId)
{
	STRING data[4];
	INTEGER byteIndex;
	INTEGER bitsToShift;
	INTEGER byteValue;
    
	data = "\x00\x00\x00\x00";

	if (_zoneId > 32) return(data);

	byteValue = 1;
	byteIndex = ((_zoneId - 1) / 8) + 1;
    bitsToShift = _zoneId - (byteIndex - 1)*8 - 1;
	byteValue = byteValue << bitsToShift;
	SetByte(data, byteIndex, byteValue);

	return(data);
}

/*
0x80 arm in mode 0:

+ 8 bytes - user code (with prefix, if required by INTEGRA), e.g.:

if code is '1234', no prefixes: 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
if code is '1234', prefix is '97': 0x97, 0x12, 0x34, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF

+ 4 bytes - partition list, e.g.:

if partition 1, 2, and 29 have to be armed: 0x03, 0x00, 0x00, 0x10

Function should return the following codes (see the 0xEF command for details):

0x00 - ok
0x01 - requesting user code not found
0x11 - can not arm, but can use force arm
0x12 - can not arm

*/
// Tylko jedna strefa na raz
STRING_FUNCTION CreateZoneArmFrame(INTEGER _zoneId, STRING _userCode, STRING _prefix)
{
	STRING data[13];

	data = CMD_ZONES_ARM + UserCodeToBytes(_userCode, _prefix) + ZoneIdToBytes(_zoneId);

	return (CreateFrame(data));
}

STRING_FUNCTION CreateZoneDisarmFrame(INTEGER _zoneId, STRING _userCode, STRING _prefix)
{
	STRING data[13];

	data = CMD_ZONES_DISARM + UserCodeToBytes(_userCode, _prefix) + ZoneIdToBytes(_zoneId);

	return (CreateFrame(data));
}

FUNCTION Disconnect()
{
	PULSE(PULSE_TIME, tcp_Disconnect);
}

INTEGER_FUNCTION Connect()
{
    gConnectAttemptCounter = 1;

	PULSE(PULSE_TIME, tcp_Connect);
    DELAY(DELAY_TIME);

	while (tcp_Connected_FB = 0 && gConnectAttemptCounter <= MAX_ATTEMPTS)
	{
		gConnectAttemptCounter = gConnectAttemptCounter + 1;
		DELAY(DELAY_TIME);
	}

	if (gConnectAttemptCounter > MAX_ATTEMPTS)
	{
		Disconnect();
		// TODO : Connection failure
		return (0);
	}

	return (1);	
}

STRING_FUNCTION ExtractData(STRING _frame)
{	
	STRING extractedData[MAX_FRAME_SIZE];

    INTEGER dataSize;
	INTEGER specialPosition;
    
    dataSize = len(_frame) - 4;	
	extractedData = mid(_frame, 3, dataSize);    
	specialPosition = find(SPECIAL_FEF0, extractedData);

	while (specialPosition > 0)
	{
		extractedData = left(extractedData, specialPosition) + right(extractedData, dataSize - specialPosition - 1);
		dataSize = dataSize - 1;
		specialPosition = find(SPECIAL_FEF0, extractedData);
	}

	extractedData = left(extractedData, dataSize - 2);
	
	return(extractedData);
}

FUNCTION HandleInputs(STRING _dataBytes)
{
    INTEGER byteIndex, bitIndex, signalIndex, dataBytesCount;

	dataBytesCount = len(_dataBytes);

	for (byteIndex = 1 to dataBytesCount)
		for (bitIndex = 0 to 7)
		{
			signalIndex = 8*(byteIndex - 1) + bitIndex + 1;
			input_FB[signalIndex] = bit(_dataBytes, byteIndex, bitIndex);
		}
}

FUNCTION HandleZones(STRING _dataBytes)
{
    INTEGER byteIndex, bitIndex, signalIndex, dataBytesCount;

	dataBytesCount = len(_dataBytes);

	for (byteIndex = 1 to dataBytesCount)
		for (bitIndex = 0 to 7)
		{
			signalIndex = 8*(byteIndex - 1) + bitIndex + 1;
			zone_FB[signalIndex] = bit(_dataBytes, byteIndex, bitIndex);
		}
}

/*
	1 byte - result code:

	0x00 - ok
	0x01 - requesting user code not found
	0x02 - no access
	0x03 - selected user does not exist
	0x04 - selected user already exists
	0x05 - wrong code or code already exists
	0x06 - telephone code already exists
	0x07 - changed code is the same
	0x08 - other error
	0x11 - can not arm, but can use force arm
	0x12 - can not arm
	0x8? - other errors
	0xFF - command accepted (i.e. data length and crc ok), will be processed
*/
FUNCTION HandleResult(INTEGER resultByte)
{
	switch(resultByte)
		{
			CASE (0x00):
			{
				toKeyboard$ = "ok";
			}
			CASE (0x01):
			{
				toKeyboard$ = "requesting user code not found";
			}
			CASE (0x02):
			{
				toKeyboard$ = "no access";
			}
			CASE (0x03):
			{
				toKeyboard$ = "selected user does not exist";
			}
			CASE (0x04):
			{
				toKeyboard$ = "selected user already exists";
			}
			CASE (0x05):
			{
				toKeyboard$ = "wrong code or code already exists";
			}
			CASE (0x06):
			{
				toKeyboard$ = "telephone code already exists";
			}
			CASE (0x07):
			{
				toKeyboard$ = "changed code is the same";
			}
			CASE (0x08):
			{
				toKeyboard$ = "other error";
			}
			CASE (0x11):
			{
				toKeyboard$ = "can not arm, but can use force arm";
			}
			CASE (0x12):
			{
				toKeyboard$ = "can not arm";
			}
			CASE (0xFF):
			{
				toKeyboard$ = "command accepted";
			}
			DEFAULT:
			{
				toKeyboard$ = "other errors";
			}
		}
}

FUNCTION HandleData(STRING _data)
{
	STRING commandByte[1];
	STRING dataBytes[MAX_FRAME_SIZE];
	INTEGER dataBytesCount;

	INTEGER byteIndex, bitIndex, signalIndex;

	if (find("ERR", _data) = 1)
	{
		return;
	}

	commandByte = left(_data, 1);
	dataBytesCount = len(_data) - 1;
	dataBytes = right(_data, dataBytesCount);

	if (commandByte = CMD_INPUTS_QUERY)
	{
		HandleInputs(dataBytes);
	}
	else if (commandByte = CMD_ZONES_QUERY)
	{
		HandleZones(dataBytes);
	}
	else if (commandByte = CMD_RESULT)
	{
		HandleResult(byte(dataBytes, 1));
	}
}

STRING_FUNCTION SendAndReceive(STRING _frameToSend)
{
	STRING receivedFrame[MAX_FRAME_SIZE];

	gReceiveAttemptCounter = 1;	
	Tx$ = _frameToSend;    

	delay(DELAY_TIME);
	
	while (len(Rx$) = 0 && gReceiveAttemptCounter <= MAX_ATTEMPTS)
	{
		gReceiveAttemptCounter = gReceiveAttemptCounter + 1;
		DELAY(DELAY_TIME);
	}

	if (gReceiveAttemptCounter > MAX_ATTEMPTS)
	{
		// TODO : Receive failure
		return ("ERR - No answer");
	}

	if (find(FRAME_START, Rx$) <> 1 || find(FRAME_END, Rx$) = 0)
	{
		// TODO : Frame failure
		return ("ERR - Frame format invalid");
	}

	receivedFrame = remove(FRAME_END, Rx$);
	clearbuffer(Rx$);
	
    return (ExtractData(receivedFrame));
}

FUNCTION ClearAll()
{
	INTEGER i;

	for (i = 1 to INPUTS_COUNT)
	{
		input_FB[i] = 0;

		if (i <= ZONES_COUNT) zone_FB[i] = 0;
	}
}

FUNCTION Start()
{
	do
	{
		delay(DELAY_TIME);
	}
	until (Connect() = 1 || enable = 0);
	
	while (enable = 1)
	{		
		if (tcp_Connected_FB = 1)
		{
			HandleData(SendAndReceive(INPUTS_QUERY_FRAME));
			HandleData(SendAndReceive(ZONES_QUERY_FRAME));

			if(gZoneToArm > 0)
			{
				HandleData(SendAndReceive(CreateZoneArmFrame(gZoneToArm, gUserCode, pPrefix)));
				gZoneToArm = 0;
				gUserCode = "";
			}

			if(gZoneToDisarm > 0)
			{
				HandleData(SendAndReceive(CreateZoneDisarmFrame(gZoneToDisarm, gUserCode, pPrefix)));
				gZoneToDisarm = 0;
				gUserCode = "";
			}

		}
		else
		{
			do
			{
				delay(DELAY_TIME);
			}
			until (Connect() = 1 || enable = 0);
		}
		
		DELAY(INTERVAL);		
	}

	Disconnect();
	
	ClearAll();
}
// ARM_3_1234
// DISARM_1_12345
FUNCTION HandleDataFromKeyboard(STRING _data)
{
	STRING keyboardCmd[10];

	keyboardCmd = remove(KEYBOARD_DELIMITER, _data);
	
	if (keyboardCmd = KEYBOARD_CMD_ARM)
	{
		gZoneToArm = atoi(remove(KEYBOARD_DELIMITER, _data));
		gUserCode = _data;
	}
	else if (keyboardCmd = KEYBOARD_CMD_DISARM)
	{
		gZoneToDisarm = atoi(remove(KEYBOARD_DELIMITER, _data));
		gUserCode = _data;
	}
}

// Event Handlers
PUSH enable
{
	Start();
}

CHANGE fromKeyboard$
{
	HandleDataFromKeyboard(fromKeyboard$);
	clearBuffer(fromKeyboard$);
}

// Main Function
Function Main()
{
	WaitForInitializationComplete();
	// TODO Init
}
