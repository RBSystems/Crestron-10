#CATEGORY "12" // System Control
#SYMBOL_NAME "SharpUniversalModule"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

//	Include libraries
#USER_SIMPLSHARP_LIBRARY "ssl_Utility"

//	Define constants
#DEFINE_CONSTANT MAX_MODULES_COUNT 100
#DEFINE_CONSTANT MAX_SIGNAL_COUNT 50
#DEFINE_CONSTANT STRING_SIZE 255

//	Inputs
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT DigitalInput[MAX_SIGNAL_COUNT, MAX_SIGNAL_COUNT];
DIGITAL_INPUT _SKIP_;
ANALOG_INPUT AnalogInput[MAX_SIGNAL_COUNT, MAX_SIGNAL_COUNT];
STRING_INPUT _SKIP_;
STRING_INPUT SerialInput[MAX_SIGNAL_COUNT, MAX_SIGNAL_COUNT][STRING_SIZE];

//	Outputs
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT DigitalOutput[MAX_SIGNAL_COUNT, MAX_SIGNAL_COUNT];
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT AnalogOutput[MAX_SIGNAL_COUNT, MAX_SIGNAL_COUNT];
STRING_OUTPUT _SKIP_;
STRING_OUTPUT SerialOutput[MAX_SIGNAL_COUNT, MAX_SIGNAL_COUNT];

//	Parameters
INTEGER_PARAMETER pModuleId;

// Parameters Properietes

#BEGIN_PARAMETER_PROPERTIES pModuleId
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , MAX_MODULES_COUNT d;
   propDefaultValue = 0d;
   propShortDescription = "Module ID";
#END_PARAMETER_PROPERTIES

//	Global sharp objects
UniversalModule thisModule;

//	Output Callback Functions
CALLBACK FUNCTION SendDigitalOutputCallback(INTEGER _id, INTEGER _value)
{
	DigitalOutput[_id] = _value;
}

CALLBACK FUNCTION SendAnalogOutputCallback(INTEGER _id, INTEGER _value)
{
	AnalogOutput[_id] = _value;
}

CALLBACK FUNCTION SendSerialOutputCallback(INTEGER _id, STRING _value)
{
	SerialOutput[_id] = _value;
}

//	Sharp module initialization
FUNCTION RegisterSharpDelegates()
{
	RegisterDelegate(thisModule, SendDigitalOutputDelegate, SendDigitalOutputCallback);
	RegisterDelegate(thisModule, SendAnalogOutputDelegate, SendAnalogOutputCallback);
	RegisterDelegate(thisModule, SendSerialOutputDelegate, SendSerialOutputCallback);
}

FUNCTION InitializeSharp()
{
	thisModule = ModuleContainer.UniversalModuleArray[pModuleId];
    RegisterSharpDelegates();
}

//	Group updating functions
FUNCTION UpdateAllDigitalInputs()
{
	INTEGER id;

	for (id = 1 to MAX_SIGNAL_COUNT) thisModule.UpdateDigitalInput(id, DigitalInput[id]);
}

FUNCTION UpdateAllAnalogInputs()
{
	INTEGER id;

	for (id = 1 to MAX_SIGNAL_COUNT) thisModule.UpdateAnalogInput(id, AnalogInput[id]);
}

FUNCTION UpdateAllSerialInputs()
{
	INTEGER id;

	for (id = 1 to MAX_SIGNAL_COUNT) thisModule.UpdateSerialInput(id, SerialInput[id]);
}

FUNCTION UpdateAllInputs()
{
	UpdateAllDigitalInputs();
    UpdateAllAnalogInputs();
    UpdateAllSerialInputs();
}

//	Sharp event handlers
EVENTHANDLER ModuleContainerInitializedEventHandler(Dummy _dummy, EventArgs _e)
{
	trace("SUM nr %d - InitializedEventHandler", pModuleId);

	InitializeSharp();
	UpdateAllInputs();
}

FUNCTION RegisterSharpEventHandlers()
{
	RegisterEvent(ModuleContainer, InitializedEvent, ModuleContainerInitializedEventHandler);
}

//	Input Event handling
CHANGE DigitalInput
{
	INTEGER id;

	id = GetLastModifiedArrayIndex();
	thisModule.UpdateDigitalInput(id, DigitalInput[id]);
}

CHANGE AnalogInput
{
	INTEGER id;

	id = GetLastModifiedArrayIndex();
	thisModule.UpdateAnalogInput(id, AnalogInput[id]);
}

CHANGE SerialInput
{
	INTEGER id;

	id = GetLastModifiedArrayIndex();
	thisModule.UpdateSerialInput(id, SerialInput[id]);
}

//	Main Function
Function Main()
{
	RegisterSharpEventHandlers();
	WaitForInitializationComplete();	
}
