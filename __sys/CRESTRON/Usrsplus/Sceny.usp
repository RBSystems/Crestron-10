//Compiler Directives
#SYMBOL_NAME "Sceny"
#HINT ""
// #CATEGORY ""
// HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

#HELP_BEGIN
	----------------------
#HELP_END

// Constants

#DEFINE_CONSTANT ILOSC_SCEN 5
#DEFINE_CONSTANT ILOSC_DIG 30
#DEFINE_CONSTANT ILOSC_DIM 15
#DEFINE_CONSTANT MAX_DIM_LEVEL 65535

#DEFINE_CONSTANT DLUGOSC_NAZWY_PLIKU 50
#DEFINE_CONSTANT ROZMIAR_ELEMENTU_PLIKU 12
#DEFINE_CONSTANT ROZMIAR_PLIKU 512

#DEFINE_CONSTANT ELEMENTY_PLIKU 22

#DEFINE_CONSTANT NAZWA_PLIKU_PREFIX "\\CF0\\Scena_"
#DEFINE_CONSTANT NAZWA_PLIKU_SUFIX ".txt" // np.: "\\CF0\\Scena_1_Pom_1.txt"
#DEFINE_CONSTANT POM_STRING "_Pom_"
#DEFINE_CONSTANT START_STRING "START"
#DEFINE_CONSTANT STOP_STRING "STOP"
#DEFINE_CONSTANT COMA_STRING ","
#DEFINE_CONSTANT FLOOR_STRING "_"
#DEFINE_CONSTANT DIG_STRING "DIG"
#DEFINE_CONSTANT DIM_STRING "DIM"

#DEFINE_CONSTANT PULSE_TIME 10

// Inputs & Outputs

DIGITAL_INPUT odpalScene[ILOSC_SCEN];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT zapiszScene[ILOSC_SCEN];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT dig_FB[ILOSC_DIG];
DIGITAL_INPUT _SKIP_;
ANALOG_INPUT dim_FB[ILOSC_DIM, ILOSC_DIM];

DIGITAL_OUTPUT dig_On[ILOSC_DIG];
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT dig_Off[ILOSC_DIG];
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT dim[ILOSC_DIM, ILOSC_DIM];

// Parameters

INTEGER_PARAMETER paramPomieszczenie;

#BEGIN_PARAMETER_PROPERTIES paramPomieszczenie
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , 30d;
   propDefaultValue = 1d;
#END_PARAMETER_PROPERTIES

// Functions

STRING_FUNCTION StworzTrescPliku()
{
	STRING trescPliku[ROZMIAR_PLIKU];
	INTEGER i;

	trescPliku = START_STRING;

	for (i = 1 to ILOSC_DIG)
	{
		trescPliku = trescPliku + COMA_STRING + DIG_STRING + FLOOR_STRING + itoa(i) + FLOOR_STRING + itoa(dig_FB[i]); 
	}

	for (i = 1 to ILOSC_DIM)
	{
		trescPliku = trescPliku + COMA_STRING + DIM_STRING + FLOOR_STRING + itoa(i) + FLOOR_STRING + itoa(dim_FB[i]); 
	}

    trescPliku = trescPliku + COMA_STRING + STOP_STRING;

	return (trescPliku);

}

FUNCTION PrzetworzElementDig(STRING _elementPliku)
{
	STRING indeksString[ROZMIAR_ELEMENTU_PLIKU];
	STRING wartoscString[ROZMIAR_ELEMENTU_PLIKU];
    INTEGER indeksPodlogi;
	INTEGER indeks, wartosc;

	indeksPodlogi = Find(FLOOR_STRING, _elementPliku);
	indeksString = Left(_elementPliku, indeksPodlogi - 1); // TODO - sprawdzic
	wartoscString = Right(_elementPliku, 1);    
	indeks = atoi(indeksString);
	wartosc = atoi(wartoscString);

	if (indeks > ILOSC_DIG || indeks < 1)
	{
		trace("Niewlasciwy indeks DIG");
		return;
	}
	else if (wartosc < 0 || wartosc > 1)
	{
		trace("Niewlasciwa wartosc DIG");
		return;
	}
	else if (wartosc = 1) Pulse(PULSE_TIME, dig_On[indeks]);
	else if (wartosc = 0) Pulse(PULSE_TIME, dig_Off[indeks]);
}

FUNCTION PrzetworzElementDim(STRING _elementPliku)
{
	STRING indeksString[ROZMIAR_ELEMENTU_PLIKU];
	STRING wartoscString[ROZMIAR_ELEMENTU_PLIKU];
    INTEGER indeksPodlogi;
	INTEGER indeks, wartosc;

	indeksPodlogi = Find(FLOOR_STRING, _elementPliku);
	indeksString = Left(_elementPliku, indeksPodlogi - 1); // TODO - sprawdzic
	wartoscString = Right(_elementPliku, Len(_elementPliku) - indeksPodlogi);    
	indeks = atoi(indeksString);
	wartosc = atoi(wartoscString);

	if (indeks > ILOSC_DIM || indeks < 1)
	{
		trace("Niewlasciwy indeks DIM");
		return;
	}
	else if (wartosc < 0 || wartosc > MAX_DIM_LEVEL)
	{
		trace("Niewlasciwa wartosc DIM");
		return;
	}
	else dim[indeks] = wartosc;	

}

FUNCTION PrzetworzElementPliku(STRING _elementPliku)
{
	INTEGER indeks;

	// Pozbycie sie ","
	_elementPliku = Left(_elementPliku, Len(_elementPliku) - 1);

	if ( Find(DIG_STRING, _elementPliku) = 1 )
	{
		PrzetworzElementDig(Right(_elementPliku, Len(_elementPliku) - 4)); // TODO: sprawdzic
		
	}
	else if ( Find(DIM_STRING, _elementPliku) = 1 )
	{
		PrzetworzElementDim(Right(_elementPliku, Len(_elementPliku) - 4)); // TODO: sprawdzic
	}
	else
	{
		trace("Niewlasciwy format elementu pliku");
		return;
	}
}

FUNCTION PrzetworzTrescPliku(STRING _trescPliku)
{
	INTEGER indeksPrzecinka;
	STRING elementPliku[ROZMIAR_ELEMENTU_PLIKU];

	if ( find(START_STRING, _trescPliku) <> 1)
	{
		trace("Niewlasciwa pozycja START");
		return;
	}
    
	// Wywalenie "START,"
	indeksPrzecinka = find(COMA_STRING, _trescPliku);
	elementPliku = RemoveByLength(indeksPrzecinka, _trescPliku); // TODO: Sprawdzic, czy nie trzeba +/- 1    
    indeksPrzecinka = find(COMA_STRING, _trescPliku);

	while (indeksPrzecinka <> 0)
	{
		PrzetworzElementPliku(RemoveByLength(indeksPrzecinka, _trescPliku));
		indeksPrzecinka = find(COMA_STRING, _trescPliku);
	}
}

FUNCTION ZapiszDoPliku(INTEGER _indeksSceny)
{
	STRING nazwaPliku[DLUGOSC_NAZWY_PLIKU];
	INTEGER iloscBajtow;
	SIGNED_INTEGER uchwytPliku;

	nazwaPliku = NAZWA_PLIKU_PREFIX + itoa(_indeksSceny) + POM_STRING + itoa(paramPomieszczenie) + NAZWA_PLIKU_SUFIX;	
	StartFileOperations();
	uchwytPliku = FileOpen(nazwaPliku, _O_WRONLY | _O_CREAT);

	if (uchwytPliku >= 0)
    {
     	iloscBajtow = WriteString(uchwytPliku, StworzTrescPliku());
		FileClose(uchwytPliku);
	}
	else
	{
		trace("Nieudany zapis do pliku - uchwytPliku = 0");
	}

	EndFileOperations();
}

FUNCTION OdczytajZPliku(INTEGER _indeksSceny)
{
	STRING nazwaPliku[DLUGOSC_NAZWY_PLIKU];
	INTEGER iloscBajtow;
	SIGNED_INTEGER uchwytPliku;
	STRING trescPliku[ROZMIAR_PLIKU];

	nazwaPliku = NAZWA_PLIKU_PREFIX + itoa(_indeksSceny) + POM_STRING + itoa(paramPomieszczenie) + NAZWA_PLIKU_SUFIX;	
	StartFileOperations();
	uchwytPliku = FileOpen(nazwaPliku, _O_RDONLY);

	if (uchwytPliku >= 0)
    {
     	iloscBajtow = ReadString(uchwytPliku, trescPliku);
		FileClose(uchwytPliku);
	}
	else
	{
		trace("Nieudany odczyt z pliku - uchwytPliku = 0");
		EndFileOperations();
		return;
	}

	EndFileOperations();
	PrzetworzTrescPliku(trescPliku);
}

// Event Handlers

PUSH zapiszScene
{
	ZapiszDoPliku(GetLastModifiedArrayIndex());
}

PUSH odpalScene
{
	OdczytajZPliku(GetLastModifiedArrayIndex());
}

Function Main()
{
}
