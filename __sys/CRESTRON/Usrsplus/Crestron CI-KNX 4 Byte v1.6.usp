/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Christophe Hombrouck
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Send_Value, _SKIP_;
ANALOG_INPUT _SKIP_,Value_HighBytes, Value_LowBytes, _SKIP_;
// STRING_INPUT 
STRING_INPUT FeedBack[50];

// DIGITAL_OUTPUT
ANALOG_OUTPUT Value_HighBytes_Analog, Value_LowBytes_Analog,_SKIP_;
STRING_OUTPUT Unsigned_Value_Text,Signed_Value_text, Command;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ObjectID;
// INTEGER_PARAMETER 
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
Long_INTEGER State,NextState;
INTEGER High_Bytes, Low_Bytes;
INTEGER RxOK;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING CommandString[200];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/




PUSH Send_Value
{
    NextState = High_Bytes;
    NextState = (NextState<<16) + Low_Bytes; 
    Command = "\xF0\x06" + chr(ObjectID) + "\x01" + chr(ObjectID) + "\x34" + chr((High_Bytes>>8)) + chr(High_Bytes) + chr((Low_Bytes>>8)) + chr(Low_Bytes);
}


CHANGE Value_HighBytes
{
 	High_Bytes = Value_HighBytes;
 	
}

CHANGE Value_LowBytes
{
 	Low_Bytes = Value_LowBytes;
}


CHANGE Feedback
{
    if(RxOk)
    {
     	RxOK = 0;
     	if(left(Feedback,10) = "CHANGE OK\x0D")
     	{
     	     State = NextState;
     	     Value_HighBytes_Analog = HighWord(State);
     	     Value_LowBytes_Analog = LowWord(State);
     	     MakeString(Unsigned_Value_Text,"%lu",State);
     	     MakeString(Signed_Value_Text,"%ld",State);
     	}
     	else if(left(Feedback,13) = "CHANGE STATE:")
     	{
     	     State = (Byte(Feedback,14)<<24) + (Byte(Feedback,15)<<16) + (Byte(Feedback,16)<<8) + Byte(Feedback,17);
     	     Value_HighBytes_Analog = HighWord(State);
     	     Value_LowBytes_Analog = LowWord(State);
     	     MakeString(Unsigned_Value_Text,"%lu",State);
     	     MakeString(Signed_Value_Text,"%ld",State);
     	}
     	else
     	{
     	      Feedback = "";
     	}
     	
     	RxOK = 1;
    }
}





/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	State = 0;
	NextState = 0;
	RxOK = 1;
	High_Bytes = 0;
	Low_Bytes = 0;
}


