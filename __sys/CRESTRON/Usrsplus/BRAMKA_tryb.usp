/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "41" // Remote System Interface
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT connected,_SKIP_,update,_SKIP_,trybUP,tryb_in[10,2];
// ANALOG_INPUT 
STRING_INPUT _SKIP_,_SKIP_,_SKIP_	,str_in[5];
// BUFFER_INPUT 

DIGITAL_OUTPUT tryb_unknown,_SKIP_,_SKIP_,_SKIP_,_SKIP_,tryb_out[10,2];
ANALOG_OUTPUT	tryb_a; 
STRING_OUTPUT tryb,_SKIP_,str_out;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER nieuzywane[5][10],tryb_n[10,2][20];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES nieuzywane
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   propDefaultValue = "NIEUZYWANE";  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER mx,semafor;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING tryb_n[10][12];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/

/*
Integer_Function MyIntFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return (0);
}
*/

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/          
PUSH trybUP{ 
	if (tryb_a=0)
	{  
	    str_out="0"; 		
	}
	else if (tryb_a<mx){
	    str_out=itoa(tryb_a+1);  
	}                          
	else{		
	    str_out="0";   	
	}
	 
}

PUSH tryb_in
{
	INTEGER i;
	
	i=GetLastModifiedArrayIndex();

	str_out=itoa(i);
}

push connected
{   
/*
	if (semafor=0){
		semafor=1;

		while (connected)
		{
			delay (7*60*100);
			*/
			str_out="0";
			/*
			trace("zapytanie o tryb");
		}

		semafor=0;
	}
	*/
	tryb_unknown=0;
} 

push update
{  
		str_out="0";
}                            


/*
RELEASE input
{
    // TODO:  Add code here
}
*/
release connected
{      
	INTEGER i;
	For (i=1 to mx)
	{
		tryb_out[i]=0;
	}
    tryb_unknown=1;
}

/*
CHANGE input
{
    // TODO:  Add code here
}
*/   
CHANGE str_in
{
	INTEGER i,k;
	
	i=atoi(str_in); 
	tryb_a=i;
	tryb=tryb_n[i] ;

	for (k=1 to mx)
	{
		if (k=i){
			tryb_out[k]=1; 
		}              
		else{
			tryb_out[k]=0;
		}
	}
	
}

/*
EVENT
{
    // TODO:  Add code here
}
*/

/*
SOCKETCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETDISCONNECT
{
    // TODO:  Add code here
}
*/

/*
SOCKETRECEIVE
{
    // TODO:  Add code here
}
*/

/*
SOCKETSTATUS
{
    // TODO:  Add code here
}
*/

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
	INTEGER i;
	   	
	for (i=1 to 10)
	{
		if (isSignalDefined(tryb_in[i])<>0)
		{
			mx=i;
		} 
	}   
	tryb_unknown=1;
                
	/*
	tryb_n[0]="BRAK";
	tryb_n[1]="Komfort";
	tryb_n[2]="Wychodze";
	tryb_n[3]="Noc";
	tryb_n[4]="AntyFreez";
    */

	semafor=0;
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.

    // WaitForInitializationComplete();
    // If you are reading any Input or Output variables, uncomment
    //   the WaitForInitializationComplete statement above and read
    //   them afterwards.  Input/Output variables will not have
    //   their correct values set until after the logic processor
    //   runs and propagates the values to them.
}

