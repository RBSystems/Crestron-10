/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:CH
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE
//#INCLUDEPATH 
#USER_SIMPLSHARP_LIBRARY "CI_KNX_4Byte_FP"
//FP_Convertor convertor;

#ENCODING_ASCII

// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
// STRING_INPUT
//ANALOG_INPUT  _SKIP_; 
BUFFER_INPUT KNX_Feedback[30];

// DIGITAL_OUTPUT 
//ANALOG_OUTPUT Value_HighBytes_Analog, Value_LowBytes_Analog,_SKIP_ ;
STRING_OUTPUT Float_Value_Text;


/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
Long_INTEGER State,NextState;
INTEGER High_Bytes, Low_Bytes;
INTEGER RxOK;
integer RX_Vz,RX_Exp, RX_Marker1;
long_integer RX_Man;
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING Feedback[500],Garbage[30],RX_Date[4],RX_TempResult[20];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/




/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/



CHANGE KNX_Feedback	
{
	Feedback = Feedback + KNX_Feedback;
	clearBuffer(KNX_Feedback);
	//MakeString(Float_Value_Text,"Start of KNX Feedback Event, Sem = %u",RxOK);
	if(RxOk)
    {
     	RxOK = 0;
		//MakeString(Float_Value_Text,"Semafoor cleared, Len FB = %u Check FB = %s",len(Feedback),left(Feedback,13));
		while(len(Feedback) >= 10)
		{
	     	//makeString(Float_Value_Text,"Start of while loop, length Feedback = %u",len(Feedback));
			if(left(Feedback,13) = "CHANGE STATE:")
	     	{
	     	     //MakeString(Float_Value_Text,"Start processing of Received values");
				  RX_Date = mid(Feedback,14,4);
				 //MakeString(Float_Value_Text,"New State Value = %lu",State);
				 Garbage = Removebylength(17,Feedback);
	     	     RX_TempResult =itoa(FP_Convertor.ConverttoFP(RX_Date));
				 Float_Value_Text = left(RX_TempResult,len(RX_TempResult)-1) + "," + right(RX_TempResult,1);
	     	}
			else if(left(Feedback,10) = "CHANGE OK\x0D")
	     	{
				 //MakeString(Float_Value_Text,"Change Ok message received & processing");
				 Garbage = Removebylength(10,Feedback);	     	     
				 	
	     	}
	     	else
	     	{
	     	    if(Find("CHANGE STATE:",Feedback) || Find("CHANGE OK\x0D",Feedback))
		     	{
		     	 	RX_Marker1 = Find("CHANGE STATE:",Feedback);
					Garbage = RemoveByLength(RX_Marker1-1,Feedback); 
					//MakeString(Float_Value_Text,"Removed %u bytes to garbage string",len(Garbage));   
		     	}
				else
				{
					Feedback = "";
					//MakeString(Float_Value_Text,"Feedback String is fully cleared");
                	 
				}
	     	}
     	}
     	RxOK = 1;
		//MakeString(Float_Value_Text,"Sem set to 1 Sem = %u",RxOK);
    }
	//MakeString(Float_Value_Text,"End of KNX Feedback Event, Sem = %u",RxOK);	
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
    RxOK = 1;
}


