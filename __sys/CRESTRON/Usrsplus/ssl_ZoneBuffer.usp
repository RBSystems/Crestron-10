//Compiler Directives
#CATEGORY "41" // Remote System Interface
#SYMBOL_NAME "ssl_ZoneLightingInterface"
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// Constants
#DEFINE_CONSTANT MAX_SWITCH_LOADS 20
#DEFINE_CONSTANT MAX_DIM_LOADS 10

// Include Libraries
#USER_SIMPLSHARP_LIBRARY "ssl_Utility"

// Inputs
DIGITAL_INPUT switchTOG[MAX_SWITCH_LOADS];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT dimTOG[MAX_DIM_LOADS];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT dimRaise[MAX_DIM_LOADS];
DIGITAL_INPUT _SKIP_;
DIGITAL_INPUT dimLower[MAX_DIM_LOADS, MAX_DIM_LOADS];
DIGITAL_INPUT _SKIP_;
ANALOG_INPUT zoneId#;

// Outputs
DIGITAL_OUTPUT switch_FB[MAX_SWITCH_LOADS]; // D-0
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT dim_FB[MAX_DIM_LOADS, MAX_DIM_LOADS]; // D-1
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT zoneId#_FB;
STRING_OUTPUT zoneName$;
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT switchCount#_FB;
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT dimCount#_FB;
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT switchType#_FB[MAX_SWITCH_LOADS]; // A-0
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT dimType#_FB[MAX_DIM_LOADS]; // A-1
ANALOG_OUTPUT _SKIP_;
ANALOG_OUTPUT dimLevel#_FB[MAX_DIM_LOADS, MAX_DIM_LOADS]; // A-2
STRING_OUTPUT _SKIP_;
STRING_OUTPUT switchName$[MAX_SWITCH_LOADS]; // S-0
STRING_OUTPUT _SKIP_;
STRING_OUTPUT dimName$[MAX_DIM_LOADS]; // S-1
STRING_OUTPUT _SKIP_;
STRING_OUTPUT dimPercent$[MAX_DIM_LOADS, MAX_DIM_LOADS]; // S-2

// Global Variables
ZoneLightingInterface thisModule;

// Functions

// Delegates
CALLBACK FUNCTION SendDigitalOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): switch_FB[_signalIndex] = _signalValue; // switch_FB
		case (1): dim_FB[_signalIndex] = _signalValue; // dim_FB
	}
}

CALLBACK FUNCTION SendAnalogOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): switchType#_FB[_signalIndex] = _signalValue; // switchType#_FB
		case (1): dimType#_FB[_signalIndex] = _signalValue; // dimType#_FB
		case (2): dimLevel#_FB[_signalIndex] = _signalValue; // dimLevel#_FB
	}
}

CALLBACK FUNCTION SendStringOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, STRING _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): switchName$[_signalIndex] = _signalValue; // switchName$
		case (1): dimName$[_signalIndex] = _signalValue; // dimName$
		case (2): dimPercent$[_signalIndex] = _signalValue; // dimPercent$
	}
}

CALLBACK FUNCTION SendZoneInfoCallback(INTEGER _switchCount, INTEGER _dimCount, STRING _zoneName)
{
	switchCount#_FB = _switchCount;
    dimCount#_FB = _dimCount;
	zoneName$ = _zoneName;
}

/*
EVENTHANDLER DevicesInitializedHandler(Dummy dummy, EventArgs e)
{
	AddDevices();
}
*/

FUNCTION RegisterSharpDelegates()
{
	RegisterDelegate(thisModule, SendDigitalOutputDelegate, SendDigitalOutputCallback);
	RegisterDelegate(thisModule, SendAnalogOutputDelegate, SendAnalogOutputCallback);
	RegisterDelegate(thisModule, SendStringOutputDelegate, SendStringOutputCallback);
	RegisterDelegate(thisModule, SendZoneInfoDelegate, SendZoneInfoCallback);
}

FUNCTION RegisterSharpEvents()
{
	//RegisterEvent(Residence, DevicesInitialized, DevicesInitializedHandler);
}

FUNCTION Initialize()
{
	RegisterSharpDelegates();
	thisModule.SetMaxSwitchCount(MAX_SWITCH_LOADS);
	thisModule.SetMaxDimCount(MAX_DIM_LOADS);
}

// Event Handlers

PUSH switchTOG
{
	thisModule.SwitchToggle(GetLastModifiedArrayIndex());
}

PUSH dimTOG
{
	thisModule.DimToggle(GetLastModifiedArrayIndex());
}

PUSH dimRaise
{
	thisModule.DimRaise(GetLastModifiedArrayIndex());
}

PUSH dimLower
{
	thisModule.DimLower(GetLastModifiedArrayIndex());
}

RELEASE dimRaise, dimLower
{
	thisModule.DimStop(GetLastModifiedArrayIndex());
}


CHANGE zoneId#
{
	if (thisModule.SetCurrentZone(zoneId#) > 0) zoneId#_FB = zoneId#;
}

// Main Function

Function Main()
{
	Initialize();
	WaitForInitializationComplete();
	// TODO Init
}
