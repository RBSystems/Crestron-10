/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer: Christophe Hombrouck
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
#OUTPUT_SHIFT 1
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT Send_Value, _SKIP_;
ANALOG_INPUT _SKIP_,Value_HighBytes,Value_MidBytes, Value_LowBytes, _SKIP_;
// STRING_INPUT 
STRING_INPUT FeedBack[50];

// DIGITAL_OUTPUT
ANALOG_OUTPUT Value_HighBytes_Analog,Value_MidBytes_Analog, Value_LowBytes_Analog,_SKIP_;
STRING_OUTPUT Value_Text,Command,debug;

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
INTEGER_PARAMETER ObjectID;
// INTEGER_PARAMETER 
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
// STRING_PARAMETER

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
/*
#BEGIN_PARAMETER_PROPERTIES parameter_variable, parameter_variable, ...
   // propValidUnits = // unitString or unitDecimal|unitHex|unitPercent|unitCharacter|unitTime|unitTicks;
   // propDefaultUnit = // unitString, unitDecimal, unitHex, unitPercent, unitCharacter, unitTime or unitTicks;
   // propBounds = lower_bound , upper_bound;
   // propDefaultValue = ;  // or, propDefaultValue = "";
   // propList = // { "value" , "label" } , { "value" , "label" } , ... ;
   // propShortDescription = "status_bar_hint_text";
   // #BEGIN_PROP_FULL_DESCRIPTION  line_1...  line_2...  line_n  #END_PROP_FULL_DESCRIPTION
   // #BEGIN_PROP_NOTES line_1...  line_2...  line_n  #END_PROP_NOTES
#END_PARAMETER_PROPERTIES
*/

/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
//Long_INTEGER State,NextState;
INTEGER High_Bytes, Low_Bytes, Mid_Bytes;
INTEGER RxOK;
LONG_INTEGER TempResult;
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING CommandString[200],State[6],NextState[6],Result[20],Values[16][15];

/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
String_Function AddProcessOne(String Number, Integer index)
{
	Integer Finished, i , num;
	String Result[20];
	Finished = 0;
	i = index;
	Result = Number;
	//MakeString(debug,"Start of AddProcessOne: Number = %s, Index = %u",Number,index);
	if(index = 1)
	{
    	//MakeString(debug,"Index = 1, add 1 to front of string");
		MakeString(Result,"1%s",Result);
		return(Result);
	}
	else
	{
		i = i -1;
		//Makestring(debug,"AddOne: Before while loop, i = %u",i);
		while(!finished)
		{
	    	//MakeString(debug,"AddOne: Start of while loop, i = %u",i);
			if((Byte(Result,i)-48)<9)
			{
	        	num = Byte(Result,i)-47;
				//MakeString(debug,"AddOne: Num < 9, num = %u",num);
				MakeString(Result,"%s%s%s",left(Result,i-1),itoa(num),Right(Result,len(Result)-i));
				//MakeString(debug,"addone: Result after adding one: %s",Result);
				finished = 1;
				return(Result);
			}
			else
			{
	        	num = 0;
				//MakeString(debug,"AddOne: Num >= 9, num = %u",num);
				MakeString(Result,"%s%s%s",left(Result,i-1),itoa(num),Right(Result,len(Result)-i));
				//MakeString(debug,"addone: Result after adding a zero: %s",Result);
				if(i = 1)
				{
					//MakeString(debug,"In while loop, Index = 1, add 1 to front of string");
					MakeString(Result,"1%s",Result);
					finished = 1;
					return(Result);	
				}
				else
				{
	          		//MakeString(debug,"In while loop, i = i - 1, i= %u",i);
					i = i - 1;  	
				}
			}
		}
	}
	
}

String_Function Add(String Value1, String Value2)
{
	Integer Length,i,j,TempResult,tempResult2;
	String Result[20],Value2$[20];
	Result = Value1;
	Value2$ = Value2;
	if(len(Value2)<len(Value1))
	{
    	j = len(Value1) - len(Value2);
		for(i = 1 to j)
		{
        	Value2$ = "0" + Value2$;
		}
	}
	//MakeString(debug,"Start of Add function: Value1 = %s, Value2 = %s",Value1,Value2$);
    Length = len(Value1);
	//MakeString(debug,"Length Value1 = %u",Length);
	for(i = Length to 1 step -1)
	{
    	//MakeString(debug,"Start of For loop: i = %u",i);
		TempResult = Byte(Result,i) + Byte(Value2$,i) -96;
		//MakeString(debug,"Tempresult(sum of digits) = %u",TempResult);
		if(TempResult > 9)
		{
        	TempResult2 = TempResult - 10;
			//MakeString(debug,"Result before processOne: %s",Result);
			//MakeString(debug,"Value2 = %s",Value2$);
			MakeString(Result,"%s%s%s",left(Result,i-1),itoa(TempResult2),Right(Result,Length -i));			
			Result = AddProcessOne(Result,i);
			//MakeString(debug,"Result after processOne: %s",Result); 	
		}
		else
		{
        	MakeString(Result,"%s%s%s",left(Result,i-1),itoa(TempResult),Right(Result,Length - i));
			//MakeString(debug,"Result no processOne: %s",Result);
		}
	}
	return(Result);			
}


Function ConvertStateToText()
{
	Integer i,j;
	String StringResult[20];
	//MakeString(debug,"Start of conversion function");
	TempResult = (Byte(State,3)<<24) + (Byte(State,4)<<16) + (Byte(State,5)<<8) + Byte(State,6);
	//MakeString(debug,"TempResult(int) = %lu",TempResult);
	MakeString(StringResult,"%lu",TempResult);
	//MakeString(debug,"TempResult(str) = %s",StringResult);
	for(i = 2 to 1 step -1)
	{
		//MakeString(debug,"Start of For loop i = %u",i);
    	for(j = 0 to 7)
		{
			//MakeString(debug,"Start of For loop j = %u",j);
        	if(bit(State,i,j))
			{
            	//MakeString(debug,"Active bit found, Byte = %u, bit = %u",i,j);
				if(i = 2)
				{
					StringResult = add(Values[j+1],StringResult);
					//MakeString(debug,"Adding value[%u], Result = %s",j+1,StringResult);
				}
				else if(i = 1)
				{
                 	StringResult = add(Values[j+9],StringResult);
					//MakeString(debug,"Adding value[%u], Result = %s",j+9,StringResult);
				}
			}
		}
	}
	Value_Text = StringResult;	     
}

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/




PUSH Send_Value
{
    NextState = chr((High_Bytes>>8)) + chr(High_Bytes)+ chr((Mid_Bytes>>8)) + chr(Mid_Bytes) + chr((Low_Bytes>>8)) + chr(Low_Bytes); 
	MakeString(Value_Text,"SendValue, NextState = %s",NextState);
    Command = "\xF0\x06" + chr(ObjectID) + "\x01" + chr(ObjectID) + "\x36" + NextState;
}


CHANGE Value_HighBytes
{
 	High_Bytes = Value_HighBytes;
 	
}

CHANGE Value_LowBytes
{
 	Low_Bytes = Value_LowBytes;
}

CHANGE Value_MidBytes
{
	Mid_Bytes = Value_MidBytes;
}


CHANGE Feedback
{
    if(len(Feedback))
    {
     	if(left(Feedback,10) = "CHANGE OK\x0D")
     	{
     	     State = NextState;
    	     if(len(State))
			{
    	     	Value_HighBytes_Analog = Byte(State,1)*256 + Byte(State,2);
			 	Value_MidBytes_Analog = Byte(State,3)*256 + Byte(State,4);
     	     	Value_LowBytes_Analog = Byte(State,5)*256 + Byte(State,6);
			 	//MakeString(Value_Text,"Receive, State = %s",State);
			 	ConvertStateToText();
			}


     	}
     	else if(left(Feedback,13) = "CHANGE STATE:")
     	{
     	     State = mid(Feedback,14,6);
     	     Value_HighBytes_Analog = Byte(State,1)*256 + Byte(State,2);
			 Value_MidBytes_Analog = Byte(State,3)*256 + Byte(State,4);
     	     Value_LowBytes_Analog = Byte(State,5)*256 + Byte(State,6);
			 //MakeString(Value_Text,"Receive, State = %s",State);
			 ConvertStateToText();
     	}
     	else
     	{
     	      Feedback = "";
     	}
    }
}





/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main()
{
	State = "";
	NextState = "";
	RxOK = 1;
	High_Bytes = 0;
	Low_Bytes = 0;
	Mid_Bytes = 0;
	TempResult = 0;
	values[1] = "4294967296";
	values[2] = "8589934592";
	values[3] = "17179869184";
	values[4] = "34359738368";
	values[5] = "68719476736";
	values[6] = "137438953472";
	values[7] = "274877906944";
	values[8] = "549755813888";
	values[9] = "1099511627776";
	values[10] = "2199023255552";
	values[11] = "4398046511104";
	values[12] = "8796093022208";
	values[13] = "17592186044416";
	values[14] = "35184372088832";
	values[15] = "70368744177664";
	values[16] = "140737488355328";
}


