/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""// #CATEGORY ""   
#DEFINE_CONSTANT MAX_SCENES 10

#DEFINE_CONSTANT RED_SHIFT 4
#DEFINE_CONSTANT GREEN_SHIFT 0
#DEFINE_CONSTANT BLUE_SHIFT 2

#DEFINE_CONSTANT RED 1
#DEFINE_CONSTANT GREEN 2
#DEFINE_CONSTANT BLUE 3


#DEFINE_CONSTANT DEBUG_FILE_OPERATIONS 1



#CATEGORY "1" // Analog Operations
// #DEFAULT_VOLATILE
// #PRINT_TO_TRACE
#DIGITAL_EXPAND InputsWithOutputs
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
/*
#HELP_BEGIN
   (add additional lines of help lines)
#HELP_END
*/

/*******************************************************************************************
  Include Libraries
  (Uncomment and include additional libraries as needed)
*******************************************************************************************/
// #CRESTRON_LIBRARY ""
// #USER_LIBRARY ""

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
DIGITAL_INPUT set,toggle,auto,_SKIP_,scena[MAX_SCENES,4];
ANALOG_INPUT _SKIP_,wiz_H,wiz_V,wiz_S,_SKIP_,dim_R,dim_G,dim_B;
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT _SKIP_,toggleFB,autoFB,_SKIP_,scena_FB[MAX_SCENES,4];
ANALOG_OUTPUT _SKIP_,setDim_R,setDim_G,setDim_B;
// STRING_OUTPUT 

/*******************************************************************************************
  SOCKETS
  (Uncomment and define socket definitions as needed)
*******************************************************************************************/
// TCP_CLIENT
// TCP_SERVER
// UDP_SOCKET

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER fileName[20];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/

#BEGIN_PARAMETER_PROPERTIES fileName
   propDefaultValue = "set_unique_file_name";
#END_PARAMETER_PROPERTIES


/*******************************************************************************************
  Structure Definitions
  (Uncomment and define structure definitions as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: struct.myString = "";
*******************************************************************************************/
/*
STRUCTURE MyStruct1
{
};

MyStruct1 struct;
*/

/*******************************************************************************************
  Global Variables
  (Uncomment and declare global variables as needed)
  Note:  Be sure to initialize all declared STRING variables as needed
         For example, in Function Main: myString = "";
*******************************************************************************************/
INTEGER savedScenes[MAX_SCENES][3],sceneHold,lastScene;
INTEGER randSemafor;
INTEGER mx;
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
STRING filePath[40];	


/*******************************************************************************************
  Functions
  (Add any additional functions here)
  Note:  Functions must be physically placed before the location in
         the code that calls them.
*******************************************************************************************/
/*
Function MyFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here
}
*/
function setValueToColor (integer value,integer color){
 	switch (color){
		case (1):{
			setDim_R = value;		
		}
		case (2):{
			setDim_R = value;		
		}
		case (3):{
			setDim_R = value;		
		}
	}
}


function generateRandomColors(){
	integer colorRand;
	integer colorOff;
	integer value;
	
	value = random (50,255);
	                         
	colorRand = random (1,3);
	
	do{
		colorOff = random (1,3);
	} until (colorRand = colorOff);
	
	                                  
	setValueToColor (value,colorRand);
	setValueToColor (0,colorOff);
}
   
   
function realStartRandom(){
	integer instanceSemafor;
	
 	randSemafor = randSemafor + 1;
	instanceSemafor = randSemafor;

	while (instanceSemafor = randSemafor  &&  autoFB=1){
    	generateRandomColors ();
		delay (300);
	}	
}
   
   
function startRandom(){
	wait (1){
		realStartRandom();
	}
}

function updateToggleFB(){
 	if (dim_R || dim_G || dim_B){
    	toggleFB=1;
	} else{
     	toggleFB=0; 
   	}
}
    

Integer_Function setVal (integer oldValue){
 	integer newValue;	
	newValue=256-(wiz_V/256);
	
	newValue=(oldValue*newValue)/256;		

	return (newValue);
}

Integer_Function setSat (integer oldValue){
 	integer newValue;	
	newValue=(wiz_S/256);
	
	newValue=((256-oldValue)*newValue)/256;		
	
	newValue=oldValue+newValue;
	
	return (newValue);
}


Integer_Function calculateValue(integer color)
{
 	integer position;
	integer value;
	
	position=wiz_H/10923;
	
	position=(position+color)%6;
	cswitch (position){
     	case (0):
   		case (1):{
        	value=0;
			break;
		}
		
		case (2):{
        	value=(wiz_H%10923)/43;
        	break;
		}
		case (3): 
		case (4):{
        	value=255;   
        	break;
		}	
	
		case (5):{
         	value=256 -((wiz_H%10923)/43); 
         	break;
		}

	}

	value=setSat(value);
	value=setVal(value);

    Return (value);
}


Function writeScenesToFile(){ 
	signed_integer file;	
	signed_integer read;

	StartFileOperations();
                          
	file = FileOpen(filePath,_O_TRUNC);
	read = WriteIntegerArray (file,savedScenes);
	#IF_DEFINED DEBUG_FILE_OPERATIONS
          trace ("HVS_to_RGB: file for save open: %d",file);
          trace ("HVS_to_RGB: file for save read: %d",read);
	#ENDIF
	FileClose(file);

	EndFileOperations();

	
}


Function saveScene(integer sceneNumber){
	integer i;

 	savedScenes[sceneNumber][RED] = dim_R;
 	savedScenes[sceneNumber][GREEN] = dim_G;
 	savedScenes[sceneNumber][BLUE] = dim_B;	

	writeScenesToFile();

	for (i=1 to mx){
    	scena_FB[i]=1;
	}
	delay(100);
	for (i=1 to mx){
    	scena_FB[i]=0;
	}
}

Function createRandomScenes(){
 	integer i;

	for (i=1 to mx){

    	savedScenes[i][RED] = random(0,255);
		savedScenes[i][GREEN] = random(0,255);
		savedScenes[i][BLUE] = random(0,255);    	
	}
}

/*
String_Function MyStrFunction1()
{
    // TODO:  Add local variable declarations here

    // TODO:  Add code here

    Return ("");
}
*/

/*******************************************************************************************
  Event Handlers
  (Uncomment and declare additional event handlers as needed)
*******************************************************************************************/
/*
PUSH input
{
    // TODO:  Add code here
}
*/
push set {  

	autoFB=0;
	
	setDim_R = calculateValue(RED_SHIFT);
	setDim_G = calculateValue(GREEN_SHIFT);
	setDim_B = calculateValue(BLUE_SHIFT); 	
}

push toggle {
 	if (toggleFB){
		setDim_R = 0;
		setDim_G = 0;
		setDim_B = 0;
		autoFB = 0;  	

	}else{
		setDim_R = calculateValue(RED_SHIFT);
		setDim_G = calculateValue(GREEN_SHIFT);
		setDim_B = calculateValue(BLUE_SHIFT);  	
	}
}

change dim_R,dim_G,dim_B{
	updateToggleFB();
}

push auto{
 	if (autoFB){
    	autoFB = 0;
	}else{
		autoFB = 1;
     	startRandom();
	}
}

push scena {
	
	lastScene = GetLastModifiedArrayIndex ();

	scena_FB[lastScene]=scena[lastScene];

	sceneHold = 1;
	delay(300);
	sceneHold = 0;
 	if (scena[lastScene]=1){
	    saveScene(lastScene);
	}
}

release scena {
	
	scena_FB[lastScene]=scena[lastScene];

 	if (sceneHold){                            
		setDim_R = savedScenes[lastScene][RED];
		setDim_G = savedScenes[lastScene][GREEN];
		setDim_B = savedScenes[lastScene][BLUE];
	}
}


/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/

Function Main(){	
	integer i;
	

	signed_integer file;

	signed_integer foundFile;
	FILE_INFO fileInfo;
	
	WaitForInitializationComplete();
	
	randSemafor=0;
        

	for (i=1 to MAX_SCENES){
    	if (isSignalDefined(scena[i])= 0){
         	mx = i;
		}
	}

   	sceneHold = 0;


	filePath = "\\NVRAM\\RGB-" + fileName + ".rgb";

	StartFileOperations();
	
	foundFile=FindFirst(filePath,fileInfo);
	FindClose();  
	
	#IF_DEFINED DEBUG_FILE_OPERATIONS
		trace ("HVS_to_RGB: found file: %d",foundFile);  
		trace ("HVS_to_RGB: fileInfo atributes: %d",fileInfo.iAttributes);
	#ENDIF


	if(foundFile<>0){	 
    	createRandomScenes();

		file = FileOpen(filePath,_O_CREAT|_O_WRONLY|_O_TRUNC);
		#IF_DEFINED DEBUG_FILE_OPERATIONS		
			trace ("HVS_to_RGB: file create: %d",file);	
			trace ("HVS_to_RGB: file name: %s",filePath);
		#ENDIF
		WriteIntegerArray (file,savedScenes);
		
	} else {
	
	
		file = FileOpen(filePath,_O_RDONLY);
		#IF_DEFINED DEBUG_FILE_OPERATIONS
			trace ("HVS_to_RGB: file trunc: %d",file);	
			trace ("HVS_to_RGB: file name: %s",filePath);
		#ENDIF		
		ReadIntegerArray (file,savedScenes);

	} 
	
	FileClose(file);

	EndFileOperations();
}  


