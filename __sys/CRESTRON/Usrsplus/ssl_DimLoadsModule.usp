//Compiler Directives
#CATEGORY "41" // Remote System Interface
#SYMBOL_NAME "SSL DimLoadsModule"
#HINT ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE

// Constants
#DEFINE_CONSTANT STRING_SIZE 30
#DEFINE_CONSTANT MAX_NUMBER_OF_LOADS 100

// Include Libraries
#USER_SIMPLSHARP_LIBRARY "ssl_Utility"

// Inputs
DIGITAL_INPUT _SKIP_, _SKIP_;
ANALOG_INPUT load_Level_FB[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {0}

// Outputs
DIGITAL_OUTPUT _SKIP_, _SKIP_;
DIGITAL_OUTPUT load_Raise[MAX_NUMBER_OF_LOADS]; // {0}
DIGITAL_OUTPUT _SKIP_;
DIGITAL_OUTPUT load_Lower[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {1}
DIGITAL_OUTPUT _SKIP_;
ANALOG_OUTPUT load_Level[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS]; // {0}

// Parameters
INTEGER_PARAMETER pUsedLoads;
INTEGER_PARAMETER _SKIP_;
INTEGER_PARAMETER pLoadType[MAX_NUMBER_OF_LOADS];
INTEGER_PARAMETER _SKIP_;
STRING_PARAMETER pLoadName[MAX_NUMBER_OF_LOADS, MAX_NUMBER_OF_LOADS][STRING_SIZE];

// Parameter Properietes
#BEGIN_PARAMETER_PROPERTIES pUsedLoads
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 1d , MAX_NUMBER_OF_LOADS d;
   propShortDescription = "Number of loads used in this module";
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES pLoadType
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propDefaultValue = 0d;
   propList = { 0d,"Light" },{ 1d,"Outlet" },{ 2d,"Other" };
   propShortDescription = "Type of load";
#END_PARAMETER_PROPERTIES

// Global Variable
DimLoadsModule thisModule;
INTEGER gIsInitialized;

// Delegates
CALLBACK FUNCTION SendDigitalOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): load_Raise[_signalIndex] = _signalValue;
		case (1): load_Lower[_signalIndex] = _signalValue;
	}
}

CALLBACK FUNCTION SendAnalogOutputCallback(INTEGER _arrayIndex, INTEGER _signalIndex, INTEGER _signalValue)
{
	switch (_arrayIndex)
	{
		case (0): load_Level[_signalIndex] = _signalValue;
	}
}

// Functions
FUNCTION RegisterDelegates()
{
	RegisterDelegate(thisModule, SendDigitalOutputDelegate, SendDigitalOutputCallback);
	RegisterDelegate(thisModule, SendAnalogOutputDelegate, SendAnalogOutputCallback);
}

FUNCTION AddLoads()
{
	INTEGER i;

	for (i = 1 to pUsedLoads) thisModule.AddLoad(i, pLoadType[i], pLoadName[i]);

	SimplSystem.DimLoadsInitialized();
}

FUNCTION InitializeInputs()
{
	INTEGER i;

	for (i = 1 to pUsedLoads) thisModule.UpdateAnalogInput(0, i, load_Level_FB[i]);
}

EVENTHANDLER SimplSystemInitializedHandler(Dummy dummy, EventArgs e)
{
	InitializeInputs();
	gIsInitialized = 1;
}

FUNCTION RegisterSharpEvents()
{
	RegisterEvent(SimplSystem, SimplSystemInitialized, SimplSystemInitializedHandler);
}

FUNCTION Initialize()
{
	RegisterDelegates();
	RegisterSharpEvents();
	thisModule.SetNumberOfLoads(pUsedLoads);
	AddLoads();
}



// Event Handlers

CHANGE load_Level_FB
{
	INTEGER i;
    
	if (gIsInitialized = 0) return;

	i = GetLastModifiedArrayIndex();
	thisModule.UpdateAnalogInput(0, i, load_Level_FB[i]);
}

// Main Function

Function Main()
{
	gIsInitialized = 0;
	Initialize();
	WaitForInitializationComplete();
	//InitializeInputs();
}
